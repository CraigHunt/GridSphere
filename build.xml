<!-- =======================================================================

   Build file for the GridSphere Portal source code

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org

Build Instructions:
   Invoke "ant help"

Copyright:
  2002,2003

- $Id$

============================================================================ -->

<project name="GridSphere" default="help" basedir=".">

    <!-- Needed to import ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

    <taskdef resource="cactus.tasks">
        <classpath>
            <pathelement location="lib/ext/cactus-integration-ant-20030401.jar"/>
        </classpath>
    </taskdef>

    <property file="build.properties"/>

    <property name="optimize"    value="false"/>
    <property name="debug"       value="on"/>
    <property name="deprecation" value="true"/>

    <!-- Version properties -->
    <property name="version"         value="1.0" />
    <property name="release"         value="ea-dev" />
    <property name="version.release" value="${version} ${release}"/>
    <property name="gridsphere.name"         value="GridSphere ${version.release}"/>
    <property name="gridsphere.api" value="GridSphere Portal Framework API ${version.release}" />

    <!-- GridSphere build and dist directories -->

    <!--- Type of SQL Database to use -->
    <property name="DATABASE_TYPE" value="${gridsphere.database.type}"/>

    <!-- GridSphere webapps files -->
    <property name="gswebapp.dir"   value="webapps/gridsphere"/>

    <!-- GridSphere DocBook documentation -->
    <property name="docbook.dir" value="docs/docbook"/>

    <property name="projects.dir" value="projects"/>

    <!-- GridSphere build targets -->
    <property name="build.lib"     value="${gridsphere.build}/lib"/>
    <property name="build.classes" value="${gridsphere.build}/classes"/>
    <property name="build.webapps" value="${gridsphere.build}/webapps"/>
    <property name="build.docs"    value="${gridsphere.build}/docs"/>
    <property name="build.javadoc" value="${build.docs}/javadocs"/>
    <property name="build.tests"   value="${gridsphere.build}/tests"/>

    <property environment="env"/>

    <!-- Check for catalina.sh in CATALINA_HOME/bin -->
    <target name="check-catalina">
        <condition property="catalina.exists">
            <available file="${env.CATALINA_HOME}/bin/catalina.sh"/>
        </condition>
        <fail message="Unable to find Tomcat 4.1.+. Make sure you have set $CATALINA_HOME set" unless="catalina.exists"/>
    </target>

    <!-- =================================================================== -->
    <!-- Sets the CLASSPATH                                                  -->
    <!-- =================================================================== -->
    <path id="classpath">

        <pathelement location="${build.classes}"/>

        <!-- this is for the servlet JARs in Tomcat 4.1.x -->
        <fileset dir="${env.CATALINA_HOME}/common/lib">
            <include name="*.jar"/>
        </fileset>

        <!-- this is for the servlet JARs in Tomcat 4.1.x -->
        <fileset dir="${env.CATALINA_HOME}/shared/lib">
            <include name="*.jar"/>
        </fileset>

        <!-- this is for the XML JARs in Tomcat 4.1.x -->
        <fileset dir="${env.CATALINA_HOME}/common/endorsed">
            <include name="*.jar"/>
        </fileset>

        <fileset dir="lib">
            <include name="*.jar"/>
            <include name="ext/*.jar"/>
        </fileset>
        <pathelement path="${java.class.path}"/>
    </path>

    <!-- =================================================================== -->
    <!-- Functions                                                           -->
    <!-- =================================================================== -->
    <target name="setenv" depends="check-catalina" description="Check for libraries and print out config information">
        <mkdir dir="${gridsphere.build}"/>
        <mkdir dir="${projects.dir}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.webapps}"/>
        <mkdir dir="${build.docs}"/>

        <echo message="--- Build environment for ${gridsphere.name} ---" />
        <echo message="--- Flags (Note: If the {property name} is displayed,"/>
        <echo message="           then the component is not present)" />
        <echo message=""/>

        <echo message="ANT_HOME is set to = ${env.ANT_HOME}"/>
        <echo message="JAVA_HOME is set to = ${env.JAVA_HOME}"/>
        <echo message="CATALINA_HOME is set to = ${env.CATALINA_HOME}"/>

        <echo message=""/>
        <echo message="--- Property values ---"/>
        <echo message="debug=${debug}"/>
        <echo message="deprecation=${deprecation}"/>
        <echo message="optimize=${optimize}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Print usage information                                             -->
    <!-- =================================================================== -->
    <target name="help" description="shows help about useful target">
        <echo message="target                 description"/>
        <echo message="-----------------------------------------------------------------"/>
        <echo message="install-fresh          Installs GridSphere from fresh CVS checkout"/>
        <echo message="clean                  Cleans up the build dir                    "/>
        <echo message="compile-all            Compiles all the code including tests      "/>
        <echo message="docs-all               Creates Javadoc API and GridSphere guides  "/>
        <echo message="tests                  Builds and runs the unit tests             "/>
        <echo message="deploy                 Deploys GS to tomcat                       "/>
        <echo message="dist                   Builds a binary GS distribution            "/>
    </target>

    <!-- =================================================================== -->
    <!-- Builds and deploys GridSphere                                       -->
    <!-- =================================================================== -->
    <target name="install-fresh" depends="clean, compile, docs, deploy" description="Build and deploy GridSphere"/>

    <!-- =================================================================== -->
    <!-- Updates GridSphere source code                                      -->
    <!-- =================================================================== -->
    <target name="update" description="Update code from CVS">
        <cvs command="update -dP"/>
    </target>

<!-- +++++++++++++++++ START COMPILE +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- Compiles all source code in distribution                            -->
    <!-- =================================================================== -->
    <target name="compile-all" depends="compile-projects, compile-tests" description="Compiles all source code in distribution"/>

    <target name="compile-projects" depends="compile" description="Compile all portlet subprojects">
        <foreach target="compile-project" param="thisEnv">
        <path>
            <dirset dir="${projects.dir}" includes="*"/>
        </path>
        </foreach>
    </target>

    <target name="compile-project" >
           <ant dir="${thisEnv}" target="compile"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles core framework                                              -->
    <!-- =================================================================== -->
    <target name="compile" depends="setenv" description="Compile core framework">
        <echo>Compiling core framework</echo>
        <javac srcdir="src"
            destdir="${build.classes}"
            excludes="org/gridlab/gridsphere/portlets/grid/**,
                      org/gridlab/gridsphere/services/grid/**"
            classpathref="classpath"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="false"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles JUnit tests                                                -->
    <!-- =================================================================== -->
    <target name="compile-tests" depends="compile" description="Compiles all JUnit tests">
        <echo>Compiling JUnit Tests</echo>
        <javac srcdir="tests"
		    destdir="${build.classes}"
		    classpathref="classpath"
		    debug="${debug}"
		    optimize="${optimize}"
		    deprecation="${deprecation}">
	    </javac>
    </target>

<!-- +++++++++++++++++ END COMPILE +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- Internal target to create the GridSphere JAR library archive        -->
    <!-- =================================================================== -->
    <target name="gridsphere-jar" depends="compile" description="Makes gridsphere JAR">

        <mkdir dir="${build.classes}/gridsphere"/>
        <copy file="config/gridsphere.properties"
                  tofile="${build.classes}/gridsphere/gridsphere.properties"/>
        <copy file="config/log4j.properties"
                  tofile="${build.classes}/gridsphere/log4j.properties"/>

        <!-- gridsphere.properties location in build dir -->
        <property name="gridsphere.properties"
                  value="${build.classes}/gridsphere/gridsphere.properties"/>

        <property name="GRIDSPHERE_HOME" value="${env.CATALINA_HOME}/gridsphere"/>
        <property name="TEST_HOME" value="${basedir}/${gridsphere.build}/home"/>

        <!-- Fills in appropriate configuration values for Tomcat -->
        <replace file="${gridsphere.properties}"
                 token="@CATALINA_HOME@"
                 value="${env.CATALINA_HOME}"/>
        <replace file="${gridsphere.properties}"
                 token="@GRIDSPHERE_HOME@"
                 value="${GRIDSPHERE_HOME}"/>
        <replace file="${gridsphere.properties}"
                 token="@TEST_HOME@"
                 value="${TEST_HOME}"/>
        <replace file="${gridsphere.properties}"
                 token="@DATABASE_TYPE@"
                 value="${DATABASE_TYPE}"/>
        <replace file="${gridsphere.properties}"
                 token="@GRIDSPHERE_VERSION@"
                 value="${version}"/>
        <replace file="${gridsphere.properties}"
                 token="@GRIDSPHERE_RELEASE@"
                 value="${release}"/>

        <echo message="Configuring GridSphere jar settings:"/>
        <echo message="GridSphere Release  ${version.release}"/>
        <echo message="Replaced CATALINA_HOME with : ${env.CATALINA_HOME}"/>
        <echo message="Replaced GRIDSPHERE_HOME with : ${GRIDSPHERE_HOME}"/>
        <echo message="Replaced GRIDSPHERE_VERSION with : ${version}"/>
        <echo message="Replaced GRIDSPHERE_RELEASE with : ${release}"/>
        <echo message="Replaced DB implementation with : ${DATABASE_TYPE}"/>

        <jar jarfile="lib/gridsphere.jar" basedir="${build.classes}" defaultexcludes="yes">
            <include name="org/**" />
            <include name="gridsphere/**" />
            <!-- don't include portlet API -->
            <exclude name="org/gridlab/gridsphere/portlet/**"/>
            <exclude name="org/gridlab/gridsphere/event/**"/>
            <!-- don't include grid portlets or services -->
            <exclude name="org/gridlab/gridsphere/portlets/grid/**"/>
            <exclude name="org/gridlab/gridsphere/services/grid/**"/>
            <!-- don't include portlet widgets tag library -->
            <exclude name="org/gridlab/gridsphere/provider/**"/>
            <exclude name="org/gridlab/gridsphere/tags/**"/>
        </jar>
     </target>

    <!-- =================================================================== -->
    <!-- Creates a Portlet API JAR library archive                           -->
    <!-- =================================================================== -->
    <target name="portlet-jar" depends="compile" description="Create lib/portlet.jar">
        <jar jarfile="lib/portlet-api.jar" basedir="${build.classes}" >
            <include name="org/gridlab/gridsphere/portlet/**"/>
            <include name="org/gridlab/gridsphere/event/**"/>
            <include name="gridsphere/log4j.properties"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the GridSphere test JAR                                     -->
    <!-- =================================================================== -->
    <target name="portlet-widget-tags-jar" depends="compile" description="Create lib/gridsphere-provider.jar">
        <jar jarfile="lib/portlet-widget-tags.jar" basedir="${build.classes}" >
            <include name="org/gridlab/gridsphere/tags/**"/>
            <metainf dir="${gswebapp.dir}/WEB-INF/tlds"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the GridSphere test JAR                                     -->
    <!-- =================================================================== -->
    <target name="gridsphere-provider-jar" depends="compile" description="Create lib/gridsphere-provider.jar">
        <jar jarfile="lib/gridsphere-provider.jar" basedir="${build.classes}" >
            <include name="org/gridlab/gridsphere/provider/**"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the GridSphere test JAR                                     -->
    <!-- =================================================================== -->
    <target name="gridsphere-test-jar" depends="compile-tests" description="Create lib/gridsphere-test.jar">
        <copy file="config/test/cactus.properties"
                  tofile="${build.classes}/gridsphere/cactus.properties"/>
        <jar jarfile="lib/gridsphere-test.jar" basedir="${build.classes}" >
            <include name="**/*Test.class"/>
            <include name="gridsphere/cactus.properties"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates all JAR's                                                   -->
    <!-- =================================================================== -->
    <target name="jar" depends="gridsphere-jar, portlet-widget-tags-jar, gridsphere-provider-jar" description="Creates all jars"/>

    <!-- =================================================================== -->
    <!-- Cleans everything                                                   -->
    <!-- =================================================================== -->
    <target name="clean-all" depends="clean-projects" description="Delete classes and existing library">
        <delete quiet="true" dir="${gridsphere.build}"/>
        <delete quiet="true" dir="${gridsphere.dist}"/>
    </target>

    <target name="clean-projects" description="Compile all portlet subprojects">
        <foreach target="clean-project" param="thisEnv">
            <path>
                <dirset dir="${projects.dir}" includes="*"/>
            </path>
        </foreach>
    </target>

    <target name="clean-project" >
        <ant dir="${thisEnv}" target="clean"/>
    </target>

    <!-- =================================================================== -->
    <!-- Cleans everything                                                   -->
    <!-- =================================================================== -->
    <target name="clean" description="Delete classes and existing library">
        <delete quiet="true" dir="${gridsphere.build}"/>
        <delete quiet="true" dir="${gridsphere.dist}"/>
    </target>

<!-- +++++++++++++++ START DATABASE STUFF ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- Creates castor definitions                                          -->
    <!-- =================================================================== -->
    <target name="configure-database" depends="doclet-mapping">
        <property name="DATABASE_FILE"
                  value="${GRIDSPHERE_HOME}/database/${DATABASE_TYPE}db.xml"/>
        <echo message="Preprocessing Database file: ${DATABASE_FILE}"/>
        <replace file="${DATABASE_FILE}"
                 token="@GRIDSPHERE_HOME@"
                 value="${GRIDSPHERE_HOME}"/>
    </target>

    <target name="configure-test-database" depends="doclet-mapping">
        <property name="DATABASE_FILE"
            value="${TEST_HOME}/database/${DATABASE_TYPE}db-test.xml"/>
        <echo message="Preprocessing Database file: ${DATABASE_FILE}"/>
        <replace file="${DATABASE_FILE}"
            token="@GRIDSPHERE_HOME@"
            value="${GRIDSPHERE_HOME}"/>
       <replace file="${DATABASE_FILE}"
            token="@TEST_HOME@"
            value="${TEST_HOME}"/>
    </target>

    <target name="check-mapping">
        <echo message="force mapping: ${var_force_mapping}"/>
        <condition property="var_force_mapping">
            <not>
                <available file="${GRIDSPHERE_HOME}/mapping/docletmapping.xml"/>
            </not>
        </condition>
    </target>

    <target name="doclet-mapping" depends="check-mapping" if="var_force_mapping">
        <javadoc packagenames="org.gridlab.gridsphere.*"
            excludepackagenames="org.gridlab.gridsphere.services.grid.*"
            sourcepath="src"
            private="true"
            doclet="org.castor.doclet.ddl.DDL"
            docletpath="lib/ext/jdom.jar;lib/ext/castor-doclet.jar"
            additionalparam=" -J-DFILE=${GRIDSPHERE_HOME}/database/dbcreate.sql -J-DDB_TYPE=db2 -J-DLOG=1">
            <classpath refid="classpath"/>
        </javadoc>
        <javadoc packagenames="org.gridlab.gridsphere.*"
            excludepackagenames="org.gridlab.gridsphere.services.grid.*"
            sourcepath="src"
            private="true"
            doclet="org.castor.doclet.jdo.JDO"
            docletpath="lib/ext/jdom.jar;lib/ext/castor-doclet.jar"
            additionalparam="-J-DFILE=${GRIDSPHERE_HOME}/mapping/docletmapping.xml -J-DLOG=1">
            <classpath refid="classpath"/>
        </javadoc>
    </target>

    <target name="check-real-database-exists">
        <echo message="force database: ${var_force_database}"/>
        <condition property="var_force_database">
            <not>
                <available file="${GRIDSPHERE_HOME}/database/gridsphere.script"/>
            </not>
        </condition>
    </target>

    <target name="check-test-database-exists">
        <echo message="force database: ${var_force_database}"/>
        <condition property="var_force_database">
            <not>
                <available file="${TEST_HOME}/database/gridsphere-test.script"/>
            </not>
        </condition>
    </target>

    <target name="create-real-database" depends="configure-database, check-real-database-exists" if="var_force_database">
        <echo message="Creating Database at: ${GRIDSPHERE_HOME}/database/gridsphere"/>
        <echo message="Using script: ${GRIDSPHERE_HOME}/database/dbcreate.sql"/>
        <sql driver="org.hsqldb.jdbcDriver"
           url="jdbc:hsqldb:${GRIDSPHERE_HOME}/database/gridsphere"
           userid="sa"
           password=""
           onerror="continue"
           src="${GRIDSPHERE_HOME}/database/dbcreate.sql">
           <classpath refid="classpath"/>
        </sql>
    </target>

    <target name="create-test-database" depends="configure-test-database, check-test-database-exists" if="var_force_database">
        <echo message="Creating Database at: ${TEST_HOME}/database/gridsphere-test"/>
        <echo message="Using script: ${TEST_HOME}/database/dbcreate.sql"/>
        <sql driver="org.hsqldb.jdbcDriver"
           url="jdbc:hsqldb:${TEST_HOME}/database/gridsphere-test"
           userid="sa"
           password=""
           onerror="continue"
           src="${GRIDSPHERE_HOME}/database/dbcreate.sql">
           <classpath refid="classpath"/>
        </sql>
    </target>

<!-- +++++++++++++++ START DOCUMENTATION ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <target name="docs" depends="javadocs, docbook" description="Create GridSphere Documentation"/>

    <!-- =================================================================== -->
    <!-- Creates all the API documentation                                   -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="setenv" description="Create GridSphere Javadocs">
        <delete quiet="true" dir="${build.javadoc}"/>
        <mkdir dir="${build.javadoc}"/>
        <javadoc packagenames="org.gridlab.gridsphere.*"
                 sourcepath="src"
                 classpathref="classpath"
                 destdir="${build.javadoc}"
                 author="true"
                 version="true"
                 splitindex="true"
                 use="true"
                 maxmemory="180m"
                 windowtitle="${gridsphere.name}"
                 doctitle="${gridsphere.api}"
                 bottom="Copyright &#169; 2002,2003 GridLab Project. All Rights Reserved.">

            <link href="http://java.sun.com/products/jdk/1.2/docs/api/"
                  offline="true"
                  packageListLoc="package-lists/jdk"/>

            <link href="http://jakarta.apache.org/log4j/docs/api/"
                  offline="true"
                  packageListLoc="package-lists/log4j"/>

            <link href="http://www.junit.org/junit/javadoc/3.8/"
                  offline="true"
                  packageListLoc="package-lists/junit"/>

            <group title="GridSphere Framework API"
                   packages="org.gridlab.gridsphere:org.gridlab.gridsphere.*"/>

            <group title="GridSphere Portlet API"
                   packages="org.gridlab.gridsphere.event:org.gridlab.gridsphere.event.*,
                             org.gridlab.gridsphere.portlet:org.gridlab.gridsphere.portlet.*,
                             org.gridlab.gridsphere.portlet.service:org.gridlab.gridsphere.portlet.service.*,
                             org.gridlab.gridsphere.portlet.service.spi:org.gridlab.gridsphere.portlet.service.spi.*"/>

            <group title="GridSphere Portlet API Implementation"
                   packages="org.gridlab.gridsphere.event.impl:org.gridlab.gridsphere.event.impl.*,
                             org.gridlab.gridsphere.portlet.impl:org.gridlab.gridsphere.portlet.impl.*,
                             org.gridlab.gridsphere.portlet.service.impl:org.gridlab.gridsphere.portlet.service.impl.*,
                             org.gridlab.gridsphere.portlet.service.spi.impl:org.gridlab.gridsphere.portlet.service.spi.impl.*"/>

            <group title="GridSphere Portal Component Library"
                   packages="org.gridlab.gridsphere.layout:org.gridlab.gridsphere.layout.*"/>

            <group title="GridSphere UI Tag Library"
                   packages="org.gridlab.gridsphere.tags:org.gridlab.gridsphere.tags.*"/>

            <group title="GridSphere Portlet Service Library"
                   packages="org.gridlab.gridsphere.services:org.gridlab.gridsphere.services.*"/>

            <group title="GridSphere Portlets"
                   packages="org.gridlab.gridsphere.portlets:org.gridlab.gridsphere.portlets.*"/>

        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Builds the GridSphere docbook documentation                         -->
    <!-- =================================================================== -->
    <target name="docbook" description="Builds the GridSphere docbook documentation.">
        <ant dir="${docbook.dir}" target="docbook" inheritAll="false"/>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the GridSphere WAR file                                  -->
    <!-- =================================================================== -->
    <target name="war" depends="jar" description="Create GridSphere WAR">
        <war warfile="${build.webapps}/gridsphere.war" update="true"
            webxml="${gswebapp.dir}/WEB-INF/web.xml">
            <fileset dir="${gswebapp.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Deploys GridSphere and all project portlets to Tomcat                                        -->
    <!-- =================================================================== -->
    <target name="deploy-all" depends="deploy" description="Compile all portlet subprojects">
        <foreach target="deploy-project" param="thisEnv">
            <path>
                <dirset dir="${projects.dir}" includes="*"/>
            </path>
        </foreach>
    </target>

    <target name="deploy-project" >
        <ant dir="${thisEnv}" target="deploy"/>
    </target>

    <!-- =================================================================== -->
    <!-- Deploys GridSphere to Tomcat                                        -->
    <!-- =================================================================== -->
    <target name="deploy" depends="jar" description="Deploys GridSphere to a local server">

        <!-- Make core gridsphere directory if necessary -->
        <echo message="Deploying GridSphere to Tomcat servlet container at ${env.CATALINA_HOME}"/>
        <mkdir dir="${GRIDSPHERE_HOME}"/>
        <mkdir dir="${GRIDSPHERE_HOME}/creds"/>

        <!-- Copy the gridsphere web app to build directory -->
        <copy todir="${build.webapps}/gridsphere">
            <fileset dir="${gswebapp.dir}"/>
        </copy>

        <!-- Copy over configuration files -->
        <copy todir="${GRIDSPHERE_HOME}">
            <fileset dir="config">
                <exclude name="*.properties"/>
                <exclude name="test/**"/>
                <exclude name="build/**"/>
                <exclude name="template/**"/>
            </fileset>
        </copy>

        <copy todir="${env.CATALINA_HOME}/shared/lib">
            <fileset dir="lib/ext"/>
            <fileset dir="lib">
                <exclude name="portlet-widget-tags.jar"/>
                <exclude name="ext/**"/>
            </fileset>
        </copy>

        <antcall target="create-real-database"/>

        <copy todir="${env.CATALINA_HOME}/webapps/gridsphere">
            <fileset dir="${build.webapps}/gridsphere"/>
        </copy>

        <copy file="lib/portlet-widget-tags.jar" todir="${env.CATALINA_HOME}/webapps/gridsphere/WEB-INF/lib"/>

    </target>

    <!-- =================================================================== -->
    <!-- Deploys GridSphere to Tomcat                                        -->
    <!-- =================================================================== -->
    <target name="deploy-test" depends="gridsphere-test-jar" description="Deploys GridSphere test to a local server">

        <copy todir="${env.CATALINA_HOME}/webapps/gridsphere/WEB-INF">
            <fileset dir="config/test"/>
        </copy>

        <copy file="lib/gridsphere-test.jar" todir="${env.CATALINA_HOME}/webapps/gridsphere/WEB-INF/lib"/>

    </target>

    <!-- =================================================================== -->
    <!-- Runs all JUnit tests: needs optional.jar and junit in classpath     -->
    <!-- =================================================================== -->
    <target name="run-tests" depends="compile-tests, deploy" description="Runs all JUnit tests">
        <echo message="Running the GridSphere Junit Tests"/>

        <copy file="config/test/cactus.properties"
            tofile="${build.classes}/gridsphere/cactus.properties"/>

        <mkdir dir="${gridsphere.build}/reports"/>

        <mkdir dir="${TEST_HOME}"/>
        <copy todir="${TEST_HOME}">
            <fileset dir="config"/>
        </copy>

        <antcall target="create-test-database"/>

        <junit printsummary="yes" fork="yes" haltonfailure="no">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${gridsphere.build}/lib/gridsphere.jar"/>
            </classpath>
            <test name="org.gridlab.gridsphere.GridSphereTest" todir="${gridsphere.build}/reports">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>

    <target name="make-test-reports" depends="run-tests" description="Execute Unit Tests">
       <echo message="Making GridSphere Junit Test Reports"/>
       <mkdir dir="${gridsphere.build}/reports/html"/>
       <junitreport todir="${gridsphere.build}/reports">
            <fileset dir="${gridsphere.build}/reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${gridsphere.build}/reports/html"/>
        </junitreport>
    </target>

<!-- +++++++++++++++ END TESTS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<!-- ++++++++++++++ START CRUSECONTROL ++++++++++++++++++++ -->

    <target name="cruisecontrol" depends="clean" description="target for cruisecontrol">
        <mkdir dir="${gridsphere.build}/reports"/>
        <junit printsummary="yes" fork="yes" haltonfailure="no">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${gridsphere.build}/lib/gridsphere.jar"/>
            </classpath>
            <test name="org.gridlab.gridsphere.GridSphereTest" todir="${gridsphere.build}/reports">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>

    <!-- =================================================================== -->
    <!-- Creates a new portlet project "newproject" in projects directory    -->
    <!-- =================================================================== -->
    <target name="new-project" description="Creates a new portlet project in projects directory">
        <ant antfile="config/build/build-newproject.xml" target="new-project"/>
    </target>

    <!-- =================================================================== -->
    <!-- Creates a new portlet project "newproject" in projects directory    -->
    <!-- =================================================================== -->
    <target name="update-project" description="Updates a portlet project in projects directory">
        <ant antfile="config/build/build-newproject.xml" target="update-project"/>
    </target>

    <!-- =================================================================== -->
    <!-- Make GridSphere distribution                                        -->
    <!-- =================================================================== -->
    <target name="dist" depends="clean, jar, war, docs" description="Build GridSphere binary distribution">
        <echo message="Building the binary GridSphere distribution" />

        <mkdir dir="${gridsphere.dist}"/>

        <!-- copy dist files -->
        <copy file="README" todir="${gridsphere.dist}"/>
        <copy file="LICENSE" todir="${gridsphere.dist}"/>
        <copy file="config/build/build.deploy.xml" tofile="${gridsphere.dist}/build.xml"/>
        <copy file="build.properties" tofile="${gridsphere.dist}/build.properties"/>

        <copy todir="${gridsphere.dist}">
            <fileset dir="${gridsphere.build}">
                <exclude name="classes/**"/>
                <exclude name="home/**"/>
                <exclude name="reports/**"/>
            </fileset>
        </copy>

        <copy todir="${gridsphere.dist}/lib">
            <fileset dir="lib"/>
        </copy>

        <copy todir="${gridsphere.dist}/config">
            <fileset dir="config">
                <exclude name="build/build.deploy.xml"/>
            </fileset>
        </copy>
    </target>

    <!--
    ========================================================================
    Run Tomcat 4.0 tests
    ========================================================================
        -->
    <target name="test.tomcat" depends="deploy"
        if="catalina.exists" description="Run tests on Tomcat">

        <!-- Start the servlet engine, wait for it to be started, run the
        unit tests, stop the servlet engine, wait for it to be stopped.
        The servlet engine is stopped if the tests fail for any reason -->

        <runservertests
            testURL="http://127.0.0.1:8080/gridsphere/ServletRedirector?Cactus_Service=RUN_TEST"
            startTarget="start.tomcat"
            stopTarget="stop.tomcat"
            testTarget="test"/>

    </target>


    <!--
       ========================================================================
         Start Tomcat 4.0
       ========================================================================
    -->
    <target name="start.tomcat">

        <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
            <jvmarg value="-Dcatalina.home=${env.CATALINA_HOME}"/>
            <arg value="start"/>
            <classpath>
                <pathelement path="${java.home}/../lib/tools.jar"/>
                <fileset dir="${env.CATALINA_HOME}">
                    <include name="bin/bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>

    </target>

    <!--
    ========================================================================
    Stop Tomcat
    ========================================================================
    -->
    <target name="stop.tomcat">
        <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
            <jvmarg value="-Dcatalina.home=${env.CATALINA_HOME}"/>
            <arg value="stop"/>
            <classpath>
                <fileset dir="${env.CATALINA_HOME}">
                    <include name="bin/bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <!--
       ========================================================================
         Run the client JUnit test cases.
       ========================================================================
    -->
    <target name="test">

        <junit printsummary="yes" haltonfailure="yes" haltonerror="yes"
            fork="yes">

            <sysproperty key="cactus.contextURL" value="http://localhost:8080/gridsphere"/>

            <classpath>
                <path refid="classpath"/>
                <pathelement location="${env.CATALINA_HOME}/webapps/gridsphere"/>
            </classpath>

            <formatter type="plain" usefile="false"/>
            <test name="org.gridlab.gridsphere.GridSphereTest"/>

        </junit>

    </target>

</project>
