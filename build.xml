<!-- ===================================================================

   Build file for the GridSphere Portal

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org

Build Instructions:
   To build, invoke "ant"

Authors:
  Jason Novotny  <novotny@aei.mpg.de>
  Oliver Wehrens <wehrens@aei.mpg.de>

Copyright:
  2002,2003

- $Id$

==================================================================== -->

<project name="GridSphere" default="help" basedir=".">

    <property name="project"        value="GridSphere"/>
    <property name="Name"           value="gridsphere"/>
    <property name="version"        value="0.9"/>

    <property name="src.dir"        value="src"/>
    <property name="build.dir"      value="build"/>
    <property name="lib.dir"        value="lib"/>
    <property name="conf.dir"       value="conf"/>
    <property name="gswebapp.dir"   value="webapps/gridsphere"/>
    <property name="corewebapp.dir" value="webapps/coreportlets"/>
    <property name="manwebapp.dir"  value="webapps/gsmanager"/>
    <property name="test.dir"       value="tests"/>
    <property name="perf.dir"       value="perf"/>
    <property name="dist.dir"       value="${Name}-${version}" />
    <property name="build.lib"      value="${build.dir}/lib"/>
    <property name="classes.dir"    value="${build.dir}/classes"/>
    <property name="build.war"      value="${build.dir}/webapp"/>
    <property name="docs.dir"       value="${build.dir}/docs"/>
    <property name="javadoc.dir"    value="${build.dir}/javadocs"/>
    <property name="reports.tests"  value="${build.dir}/tests"/>
    <property name="test.cfg.dir"   value="${src.dir}"/>

    <property name="gridsphere.dir" value="${env.CATALINA_HOME}/${Name}"/>
    <property name="gridsphere-hsqldb.dir" value="${gridsphere.dir}/db"/>
    <property name="exclude.dirs" value=""/>

  <!--
    <property name="var_force_mapping" value=""/>
    <property name="var_force_database" value=""/>

        just for the records here, this will determine if the mapping target gets run
        if called, if this is not set if does not get executed, so it will only be set
        in the deploy-all or focre-mapping target
    -->

    <property name="debug" value="on"/>
    <property name="deprecation" value="false"/>

    <property environment="env"/>


    <!-- =================================================================== -->
    <!-- Determine what dependencies are present                             -->
    <!-- =================================================================== -->
    <path id="classpath">
        <pathelement location="${classes.dir}"/>

        <fileset dir="${env.CATALINA_HOME}/common/lib">
            <include name="*.jar"/>
        </fileset>

        <!-- this is for the XML JARs in Tomcat 4.1.x -->
        <fileset dir="${env.CATALINA_HOME}/common/endorsed">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="lib/">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${java.class.path}"/>
    </path>

    <!-- =================================================================== -->
    <!-- Functions                                                           -->
    <!-- =================================================================== -->
    <target name="setenv" description="Check for libraries and print out config information">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.war}"/>
        <mkdir dir="${classes.dir}"/>

        <available property="cog.present"
            classname="org.globus.common.Version"
            classpathref="classpath"/>

        <available property="log4j.present"
            classname="org.apache.log4j.Logger"
            classpathref="classpath"/>

        <available property="junit.present"
            classname="junit.framework.TestCase"
            classpathref="classpath"/>

        <copy file="${conf.dir}/log4j.properties" toDir="${classes.dir}"/>

        <echo message="--- Build environment for ${project} ---" />
        <echo message="--- Flags (Note: If the {property name} is displayed,"/>
        <echo message="           then the component is not present)" />
        <echo message=""/>

        <echo message="ANT_HOME is set to = ${env.ANT_HOME}"/>
        <echo message="JAVA_HOME is set to = ${env.JAVA_HOME}"/>
        <echo message="CATALINA_HOME is set to = ${env.CATALINA_HOME}"/>
        <echo message="${classpath}"/>

        <echo message="=== Required Libraries ===" />
        <echo message="log4j.present=${log4j.present}" />

        <echo message=""/>
        <echo message="--- Optional Libraries ---" />
        <echo message="junit.present=${junit.present}" />
        <echo message=""/>
        <echo message="--- Property values ---" />
        <echo message="debug=${debug}" />
        <echo message="deprecation=${deprecation}" />
        <echo message="optimize=${optimize}" />
    </target>

    <!-- =================================================================== -->
    <!-- Functions                                                           -->
    <!-- =================================================================== -->
    <target name="setenv-deploy" description="Check for CATALINA_HOME required for deployment">

    </target>

    <!-- =================================================================== -->
    <!-- puts out a HELP test                                                -->
    <!-- =================================================================== -->

    <target name="help" description="shows help about useful target">
        <echo message="target                 description"/>
        <echo message="-----------------------------------------------------------------"/>
        <echo message="install-fresh          will do everything (clean, compile, docs, "/>
        <echo message="                           mapping,jar,deploy)                   "/>
        <echo message="clean                  will clean up the build dir               "/>
        <echo message="runtests               will build and run the tests              "/>
        <echo message="deploy                 deployes GS to tomcat                     "/>
        <echo message="force-mapping          will rebuild the mapping file for castor  "/>
        <echo message="force-database         will rebuild the databasestructure        "/>
        <echo message="                           in the deployed gridsphere            "/>
    </target>

    <target name="newproject" description="creates a new project template">

    </target>

    <!-- =================================================================== -->
    <!-- Builds and deploys GridSphere                                       -->
    <!-- =================================================================== -->
    <target name="install-fresh" depends="clean,compile,docs-all,force-mapping,jar,deploy" description="Build and deploy GridSphere"/>

    <!-- =================================================================== -->
    <!-- Updates GridSphere source code                                      -->
    <!-- =================================================================== -->
    <target name="update" description="Update code from CVS">
        <cvs command="update -dP"/>
    </target>


    <!-- =================================================================== -->
    <!-- Compiles GridSphere source code                                      -->
    <!-- =================================================================== -->
    <target name="compile" depends="setenv" description="Compile GridSphere source code">
        <!-- backup, deploy and preprocess the properties file -->
        <copy file="conf/gridsphere.properties" tofile="conf/gridsphere.properties.bak"/>
        <copy file="conf/gridsphere.properties" tofile="${classes.dir}/${Name}/gridsphere.properties"/>
        <copy file="conf/log4j.properties" tofile="${classes.dir}/log4j.properties" />

        <!-- <copy file="${webapp.dir}/WEB-INF/conf/${Name}.properties" tofile="${env.TOMCAT_HOME}/webapps/${Name}/WEB-INF/conf/${Name}.properties" />  -->

        <javac  srcdir="${src.dir}"
            destdir="${classes.dir}"
            classpathref="classpath"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">
        </javac>

    </target>


<!-- +++++++++++++++++ START JARCREATION +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- Creates a GridSphere JAR library archive                            -->
    <!-- =================================================================== -->
    <target name="gridsphere-jar" depends="compile" description="Create gridsphere.jar">
        <!-- need todo some modifications on gridsphere.properties for the DB -->

        <replace file="${classes.dir}/${Name}/gridsphere.properties" token="@CATALINA_HOME@" value="${env.CATALINA_HOME}"/>
        <replace file="${classes.dir}/${Name}/gridsphere.properties" token="@GRIDSPHERE_WEBAPP@" value="${GRIDSPHERE_WEBAPP}"/>
        <replace file="${classes.dir}/${Name}/gridsphere.properties" token="@GRIDSPHERE_HOME@" value="${env.CATALINA_HOME}/${Name}"/>
        <replace file="${classes.dir}/${Name}/gridsphere.properties" token="@DB_CONFIG_FILE@" value="${DB_CONFIG_FILE}"/>
        <replace file="${classes.dir}/${Name}/gridsphere.properties" token="@DB_DATABASE@" value="${DB_DATABASE}"/>
        <echo message="Replaced DB Config with : ${DB_CONFIG_FILE}"/>
        <echo message="Replaced DB Database with : ${DB_DATABASE}"/>


        <jar jarfile="${build.lib}/${Name}.jar" basedir="${classes.dir}" >
            <include name="log4j.properties" />
            <include name="org/**" />
            <include name="${Name}/**" />
            <!-- don't include portlet API -->
            <exclude name="org/gridlab/gridsphere/portlet/**"/>
            <exclude name="org/gridlab/gridsphere/event/**"/>
            <!-- don't include core portlets -->
            <exclude name="org/gridlab/gridsphere/portlets/**"/>
            <!-- don't include portlet widgets tag library -->
            <exclude name="org/gridlab/gridsphere/tags/**"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates a Portlet API JAR library archive                           -->
    <!-- =================================================================== -->
    <target name="portlet-jar" depends="compile" description="Create ${build.lib}/portlet.jar">
        <jar jarfile="${build.lib}/portlet-api.jar" basedir="${classes.dir}" >
            <include name="log4j.properties"/>
            <include name="org/gridlab/gridsphere/portlet/**"/>
            <include name="org/gridlab/gridsphere/event/**"/>
            <include name="${conf.dir}/log4j.properties"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the Portlet Widgets Tag Library                             -->
    <!-- =================================================================== -->
    <target name="portlet-widgets-jar" depends="compile" description="Create ${build.lib}/portlet-widget-tags.jar">
        <jar jarfile="${build.lib}/portlet-widget-tags.jar" basedir="${classes.dir}" >
            <include name="org/gridlab/gridsphere/tags/**" />
            <metainf dir="${gswebapp.dir}/WEB-INF/tlds"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates core portlets required by GridSphere                        -->
    <!-- =================================================================== -->
    <target name="core-portlets-jar" depends="compile" description="Create ${build.lib}/coreportlets.jar">
        <jar jarfile="${build.lib}/coreportlets.jar" basedir="${classes.dir}" >
            <include name="org/gridlab/gridsphere/portlets/**" />
            <exclude name="org/gridlab/gridsphere/portlets/manager/**" />
            <include name="${conf.dir}/log4j.properties"/>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates GridSphere manager portlet                                  -->
    <!-- =================================================================== -->
    <target name="manager-portlet-jar" depends="compile" description="Create ${build.lib}/gsmanager-portlet.jar">
        <jar jarfile="${build.lib}/gsmanager-portlet.jar" basedir="${classes.dir}" >
            <include name="org/gridlab/gridsphere/portlets/manager/**" />
            <include name="${conf.dir}/log4j.properties"/>
        </jar>
    </target>


    <!-- =================================================================== -->
    <!-- Creates all JAR's                                                   -->
    <!-- =================================================================== -->
    <target name="jar" depends="gridsphere-jar, portlet-jar, portlet-widgets-jar, manager-portlet-jar" description="Creates all jars"/>


<!-- +++++++++++++++++ END JARCREATION +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


    <!-- =================================================================== -->
    <!-- Cleans everything                                                   -->
    <!-- =================================================================== -->
    <target name="clean" description="Delete classes and existing library">
        <delete dir="${classes.dir}"/>
        <delete quiet="true" dir="${dist.dir}"/>
        <delete quiet="true" dir="${build.dir}"/>
        <delete quiet="true" dir="${reports.tests}"/>
    </target>


<!-- +++++++++++++++ START DATABASE STUFF ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- Creates castor definitions                                          -->
    <!-- =================================================================== -->
    <target name="mapping-internal" description="forces the execution of the mapping target (internal)">
        <property name="var_force_mapping" value="goforit"/>
    </target>

    <target name="check-mapping" description="checks if a mapping file exists and set var if not (will force then to create one)">
        <echo message="force mapping: ${var_force_mapping}"/>
        <condition property="var_force_mapping">
            <not>
                <available file="webapps/gridsphere/WEB-INF/conf/mapping/docletmapping.xml"/>
            </not>
        </condition>
        <condition property="var_force_mapping">
            <not>
                <available file="conf/dbcreate.sql"/>
            </not>
        </condition>
    </target>

    <target name="force-mapping" depends="mapping-internal, mapping" description="forces the execution of the mapping target"/>

    <target name="mapping" depends="check-mapping" description="creates the mapping files for castor" if="var_force_mapping">

        <javadoc packagenames="org.gridlab.gridsphere.*"
            sourcepath="src"
            private="true"
            doclet="org.castor.doclet.ddl.DDL"
            docletpath="lib/jdom.jar;lib/castor-doclet.jar"
            additionalparam=" -J-DFILE=conf/dbcreate.sql  -J-DDB_TYPE=db2 -J-DLOG=1">
        <classpath refid="classpath"/>
        </javadoc>
        <javadoc packagenames="org.gridlab.gridsphere.*"
            sourcepath="src"
            private="true"
            doclet="org.castor.doclet.jdo.JDO"
            docletpath="lib/jdom.jar;lib/castor-doclet.jar"
            additionalparam="-J-DFILE=webapps/gridsphere/WEB-INF/conf/mapping/docletmapping.xml -J-DLOG=1">
        <classpath refid="classpath"/>
        </javadoc>

    </target>

    <!-- =================================================================== -->
    <!-- create database tables inside different rdbms                       -->
    <!-- =================================================================== -->

    <target name="force-database-internal"  description="forces to rebuild the database in the deployed gs">
        <property name="var_force_database" value="goforit"/>
    </target>

    <target name="force-database" depends="force-database-internal, force-mapping, db-hsqldb" description="forces to rebuild the database in the deployed gs"/>

    <target name="check-database-hsqldb" description="checks if databasefile for hsqldb is there">
        <echo message="FORCE: ${var_force_database}"/>
        <condition property="var_force_database">
            <not>
                <available file="conf/gridsphere-db.script"/>
            </not>
        </condition>
        <echo message="FORCE 1: ${var_force_database}"/>
        <condition property="var_force_database">
            <not>
                <available file="conf/gridsphere-db.properties"/>
            </not>
        </condition>
        <echo message="FORCE 2: ${var_force_database}"/>
    </target>

    <target name="db-mysql" depends="mapping" description="create the mysql tables (not working)">
      <sql
          driver="org.gjt.mm.mysql.Driver"
          url="jdbc:mysql://127.0.0.1/portaltest"
          userid="root"
          password=""
          onerror="continue"
          src="conf/dbcreate.sql">
          <classpath refid="classpath"/>
        </sql>
    </target>

    <target name="db-postgresql" depends="mapping" description="creates postgres tables">
      <sql
          driver="org.postgresql.Driver"
          url="jdbc:postgresql:gridsphere"
          userid="portal"
          password=""
          onerror="continue"
          src="conf/dbcreate.sql">
          <classpath refid="classpath"/>
        </sql>
    </target>

    <target name="db-hsqldb" depends="check-database-hsqldb,mapping" description="creates hsqldb tables" if="var_force_database">
      <sql
          driver="org.hsqldb.jdbcDriver"
          url="jdbc:hsqldb:conf/gridsphere-db"
          userid="sa"
          password=""
          onerror="continue"
          src="conf/dbcreate.sql">
          <classpath refid="classpath"/>
        </sql>
    </target>

    <target name="db-hsqldb-junit" depends="mapping" description="creates hsqldb tables for unit tests">
      <mkdir dir="db"/>
      <sql
          driver="org.hsqldb.jdbcDriver"
          url="jdbc:hsqldb:db/junit-db"
          userid="sa"
          password=""
          onerror="continue"
          src="conf/dbcreate.sql">
          <classpath refid="classpath"/>
        </sql>
    </target>

    <target name="docs-all" depends="docs-gs, docs-portlet-api" description="Create GridSphere Javadocs"/>

    <!-- =================================================================== -->
    <!-- Creates all the API documentation                                   -->
    <!-- =================================================================== -->
    <target name="docs-gs" depends="setenv" description="Create GridSphere Javadocs">
        <delete quiet="true" dir="${javadoc.dir}/gridsphere"/>
        <mkdir dir="${javadoc.dir}/gridsphere"/>
        <javadoc packagenames="org.*"
                 sourcepath="${src.dir}"
                 classpathref="classpath"
                 destdir="${javadoc.dir}/gridsphere"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="${project} Portlet API"
                 doctitle="${project} Portlet API"
                 bottom="Copyright &#169; 2002,2003 GridLab Project. All Rights Reserved."/>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the Portlet API and Services documentation                               -->
    <!-- =================================================================== -->
    <target name="docs-portlet-api" depends="setenv" description="Create GridSphere Javadocs">
    <delete quiet="true" dir="${javadoc.dir}/portletapi"/>
    <mkdir dir="${javadoc.dir}/portletapi"/>
        <javadoc
           packagenames="org.gridlab.gridsphere.portlet.*,
                         org.gridlab.gridsphere.event.*,
                         org.gridlab.gridsphere.services.*"
           sourcepath="${src.dir}"
           classpathref="classpath"
           destdir="${javadoc.dir}/portletapi"
           author="true"
           version="true"
           use="true"
           windowtitle="${project} Portlet API"
           excludepackagenames="org.gridlab.gridsphere.portlet.impl.*,
                                org.gridlab.gridsphere.portlet.service.spi.impl.*,
                                org.gridlab.gridsphere.event.impl.*,
                                org.gridlab.gridsphere.services.*.impl.*,
                                org.gridlab.gridsphere.services.*.*.impl.*"

           defaultexcludes="yes"
           doctitle="${project} Portlet API"
           bottom="Copyright &#169; 2002,2003 GridLab Project. All Rights Reserved."/>
    </target>




<!-- +++++++++++++++ END DATABASE STUFF ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<!-- +++++++++++++++ START WAR CREATION ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- Creates the GridSphere WAR file                                                -->
    <!-- =================================================================== -->
    <target name="gridsphere-war" depends="jar" description="Create GridSphere WAR for deployment">
        <war warfile="${build.dir}/${Name}.war"
            webxml="${gswebapp.dir}/WEB-INF/web.xml">
            <classes dir="${classes.dir}"/>
            <lib dir="${lib.dir}">
                <include name="*.jar"/>
                <exclude name="servlet*.jar"/>
            </lib>
            <fileset dir="${gswebapp.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the core portlets WAR file                                  -->
    <!-- =================================================================== -->
    <target name="core-war" depends="jar" description="Create GridSphere WAR for deployment">
        <war warfile="${build.dir}/coreportlets.war"
            webxml="${corewebapp.dir}/WEB-INF/web.xml">
            <classes dir="${classes.dir}"/>
            <lib dir="${lib.dir}">
                <include name="*.jar"/>
                <exclude name="servlet*.jar"/>
            </lib>
            <fileset dir="${corewebapp.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
        </war>
    </target>

<!-- +++++++++++++++ END WAR CREATION ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


<!-- +++++++++++++++ START DEPLOY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- ================================================================= -->
    <!-- Deploys core portlets to a local server                              -->
    <!-- ================================================================= -->
    <target name="deploy" depends="deploy-prepare, db-hsqldb, deploy-gs, deploy-portlets, deploy-manager-portlet" description="deploys gs"/>


    <!-- ================================================================= -->
    <!-- Deploys core GridSphere to a local server                              -->
    <!-- ================================================================= -->
    <target name="deploy-prepare" description="prepares local deployment">
        <!-- Make core gpdk directory if necessary -->
        <mkdir dir="${env.CATALINA_HOME}/gridsphere"/>
        <mkdir dir="${env.CATALINA_HOME}/gridsphere/creds"/>
        <!-- where hsqldb stores the datafiles -->
        <mkdir dir="${env.CATALINA_HOME}/gridsphere/db"/>

        <!-- delete those two files to make sure the correct db version gets packaged -->
        <delete file="${build.dir}/lib/${Name}.jar"/>
        <delete file="${build.dir}/${Name}/gridsphere.properties"/>

        <!-- we deploy, so we use the real hsqldb for now, this needs to be
           configurable for other DB as well -->

        <property name="GRIDSPHERE_WEBAPP" value="${env.CATALINA_HOME}/${gswebapp.dir}"/>
        <property name="DB_CONFIG_FILE" value="${GRIDSPHERE_WEBAPP}/WEB-INF/conf/hsqldb.xml"/>
        <property name="DB_DATABASE" value="gridsphere"/>

        <echo message="Deploy-prepare Replaced DB Config with : ${DB_CONFIG_FILE}"/>
        <echo message="Deploy-prepare Replaced DB Database with : ${DB_DATABASE}"/>

    </target>

    <!-- ================================================================= -->
    <!-- Deploys GridSphere to a local server                              -->
    <!-- ================================================================= -->
    <target name="deploy-gs" depends="jar" description="Deploys GridSphere to a local server">
        <copy todir="${build.war}/${Name}">
            <fileset dir="${gswebapp.dir}"/>
        </copy>
        <copy todir="${env.CATALINA_HOME}/shared/lib">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
                <exclude name="servlet*.jar"/>
            </fileset>
            <fileset dir="${build.lib}">
                <exclude name="portlet-widget-tags.jar"/>
                <exclude name="gsmanager-portlet.jar"/>
                <exclude name="coreportlets.jar"/>
            </fileset>
        </copy>

        <!-- Installs hsqldb to tomcat                                         -->
        <replace file="${build.war}/${Name}/WEB-INF/conf/hsqldb.xml" token="@CATALINA_HOME@" value="${env.CATALINA_HOME}"/>

        <copy file="conf/gridsphere-db.properties" tofile="${env.CATALINA_HOME}/gridsphere/db/gridsphere-db.properties" />
        <copy file="conf/gridsphere-db.script" tofile="${env.CATALINA_HOME}/gridsphere/db/gridsphere-db.script" />

     <!--   <replace file="${build.war}/${Name}/WEB-INF/conf/hsqldb-junit.xml" token="@CATALINA_HOME@" value="${env.CATALINA_HOME}"/>   -->
        <copy todir="${env.CATALINA_HOME}/webapps/${Name}">
            <fileset dir="${build.war}/${Name}"/>
        </copy>

        <copy file="${build.lib}/portlet-widget-tags.jar" todir="${env.CATALINA_HOME}/webapps/${Name}/WEB-INF/lib"/>

        <copy file="conf/log4j.properties" tofile="${env.CATALINA_HOME}/webapps/${Name}/WEB-INF/log4j.properties" />

    </target>

    <!-- ================================================================= -->
    <!-- Deploys core portlets to a local server                           -->
    <!-- ================================================================= -->
    <target name="deploy-portlets" depends="core-portlets-jar" description="Deploys core portlets to a local server">
        <copy todir="${build.war}/coreportlets">
            <fileset dir="${corewebapp.dir}"/>
        </copy>
        <copy todir="${env.CATALINA_HOME}/webapps/coreportlets">
            <fileset dir="${build.war}/coreportlets"/>
        </copy>
        <copy file="${build.lib}/portlet-widget-tags.jar" todir="${env.CATALINA_HOME}/webapps/coreportlets/WEB-INF/lib"/>
        <copy file="${build.lib}/coreportlets.jar" todir="${env.CATALINA_HOME}/webapps/coreportlets/WEB-INF/lib"/>
    </target>

    <!-- ================================================================= -->
    <!-- Deploys GS manager portlet to a local server                           -->
    <!-- ================================================================= -->
    <target name="deploy-manager-portlet" depends="manager-portlet-jar" description="Deploys GridSphere manager portlet to a local server">
        <copy todir="${build.war}/gsmanager">
            <fileset dir="${manwebapp.dir}"/>
        </copy>
        <copy file="${build.lib}/portlet-widget-tags.jar" todir="${env.CATALINA_HOME}/${manwebapp.dir}/WEB-INF/lib"/>
        <copy file="${build.lib}/gsmanager-portlet.jar" todir="${env.CATALINA_HOME}/${manwebapp.dir}/WEB-INF/lib"/>
        <copy todir="${env.CATALINA_HOME}/${manwebapp.dir}">
            <fileset dir="${build.war}/gsmanager"/>
        </copy>
    </target>

<!-- +++++++++++++++ END DEPLOY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->


<!-- +++++++++++++++ START TESTS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- Compiles and runs all JUnit tests: needs optional.jar and junit in classpath     -->
    <!-- =================================================================== -->
    <target name="compiletests" if="junit.present" depends="compile" description="Compiles all JUnit tests">
        <javac  srcdir="${test.dir}"
		    destdir="${classes.dir}"
		    classpathref="classpath"
		    debug="${debug}"
		    optimize="${optimize}"
		    deprecation="${deprecation}">
	    </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Runs all JUnit tests: needs optional.jar and junit in classpath     -->
    <!-- =================================================================== -->
    <target name="wsdl2java" if="axis.present" description="Converts WSDL files to Java objects">
        <wsdl2java url="${axis.home}/samples/echo/InteropTest.wsdl"
               output="${axis.home}/build/work"
               deployscope="session"
               serverSide="no"
               noimports="no"
               verbose="no"
               typeMappingVersion="1.1"
               testcase="no">
            <mapping namespace="http://soapinterop.org/" package="samples.echo"/>
            <mapping namespace="http://soapinterop.org/xsd" package="samples.echo"/>
        </wsdl2java>
    </target>

    <!-- =================================================================== -->
    <!-- prepares stuff for the junit tests                                  -->
    <!-- =================================================================== -->

    <target name="test-prepare" description="prepares stuff for unit tests">
        <property name="DB_CONFIG_FILE" value="webapps/gridsphere/WEB-INF/conf/hsqldb-junit.xml"/>
        <property name="DB_DATABASE" value="junit"/>
        <property name="GRIDSPHERE_WEBAPP" value="webapps/gridsphere"/>
        <!-- now delete the jar file to make sure we get a correct one -->
        <delete file="${build.dir}/lib/${Name}.jar"/>
        <delete file="${build.dir}/${Name}/gridsphere.properties"/>
        <delete file="db/junit-db.script"/>
        <delete file="db/junit-db.properties"/>

    </target>

    <!-- =================================================================== -->
    <!-- Runs all JUnit tests: needs optional.jar and junit in classpath     -->
    <!-- =================================================================== -->
    <target name="runtests" depends="test-prepare, compiletests,  db-hsqldb-junit, jar" if="junit.present" description="Runs all JUnit tests">
        <mkdir dir="${build.dir}/reports"/>
        <junit printsummary="yes" fork="yes" haltonfailure="no">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${build.dir}/lib/${Name}.jar"/>
            </classpath>
            <test name="org.gridlab.gridsphere.AllJUnitTests" todir="${build.dir}/reports">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>


    <target name="make-test-reports" depends="runtests,  db-hsqldb-junit, jar" if="junit.present" description="Execute Unit Tests">
       <mkdir dir="${build.dir}/reports/html"/>
       <junitreport todir="${build.dir}/reports">
            <fileset dir="${build.dir}/reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/reports/html"/>
        </junitreport>
    </target>

<!-- +++++++++++++++ END TESTS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- =================================================================== -->
    <!-- compiles performance tests     -->
    <!-- =================================================================== -->

    <target name="compileperf" if="junit.present" depends="compile" description="Compiles all performance tests">
        <javac  srcdir="${perf.dir}"
		    destdir="${classes.dir}"
		    classpathref="classpath"
		    debug="${debug}"
		    optimize="${optimize}"
		    deprecation="${deprecation}">
	    </javac>
    </target>


    <!-- =================================================================== -->
    <!-- Runs performance tests     -->
    <!-- =================================================================== -->
    <target name="perfusermanager" depends="compileperf" description="run the perf user manager test">
        <java classname="org.gridlab.gridsphere.usermanager.PerfUserManager" classpathref="classpath"/>
    </target>

<!-- ++++++++++++++ START CRUSECONTROL ++++++++++++++++++++ -->

    <target name="cruisecontrol" depends="clean" description="target for cruisecontrol">
        <mkdir dir="${build.dir}/reports"/>
        <junit printsummary="yes" fork="yes" haltonfailure="no">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${build.dir}/lib/${Name}.jar"/>
            </classpath>
            <test name="org.gridlab.gridsphere.AllJUnitTests" todir="${build.dir}/reports">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>

</project>
