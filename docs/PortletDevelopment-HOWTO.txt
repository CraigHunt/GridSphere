/**
 * $Id$
 */

Developing Portlets in the GridSphere Framework

1) Portlet Concepts
2) Portlet Lifecycle
3) Portlet Deployment Descriptors
4) Basic Portlet Objects
5) Portlet Packaging
6) Writing a Hello World Portlet
7) Other Resources


1. Portlet Concepts

Portlets are defined as visual components that can be organized into portal web pages. Portlets
provide "mini-applications" that can either display informational content or provide access to other services. The
GridSphere portal allows users to customize their workspace by adding and removing portlets as needed. In addition
to standard window states like minimized or maximized, portlets can also provide various "modes". The standard portlet
modes are "view", "edit", "configure" and "help". As an example, consider a Stock Quote portlet that allows users to
customize their stock quote information. View mode would display a user's stock information. Help mode provides users
with informational content about the stock quote portlet and how to use it. Edit mode allows users to change the list
of stocks they are intersted in monitoring. Finally, Configure mode allows portlet administrators to change persistent
settings such as the stock quote service that is contacted.

The architecture of GridSphere and API definitions of key portlet concepts matches the portlet API provided
by IBM WebSphere to a large extent. An excellent source of more information on portlets and portlet development
is the WebSphere 4.1 Portlet Developer's Guide.

In following largely the WebSphere specification, GridSphere also supports the notion that portlets inherit from
the servlet concept and API defined in Sun's Servlet Specification. Hence, GridSphere runs as a web application
that provides a portlet container for managing deployed portlets. Portlets are intended to be administered dynamically
and portlet administrators can deploy and undeploy portlets to the container.

The following inheritance hierarchy describes the relationship between servlets and portlets:

javax.servlet.http.HttpServlet
    org.gridlab.gridsphere.portlet.Portlet
        org.gridlab.gridsphere.portlet.PortletAdaptor
            org.gridlab.gridsphere.portlet.AbstractPortlet
                ...
                com.mycom.MyPortlet

2. Portlet Lifecycle

Application portlets are defined to be the portlets as servlets where a single instance exists for the duration
of the portlet container. A concrete portlet instance is an application portlet parametrized with additional data
found in the portlets's deployment descriptor (see next section). For instance, it's possible to provide access to
multiple Stock Quote Portlets that may have different configuration settings or allow access to a different set of
groups, etc.

The following lifecycle methods are implemented or subclassed by the Portlet classes:

void init(PortletConfig config) -- the first phase of startup. The portlet is instantiated with the PortletConfig
                                   information (see Basic Portlet Objects section)

void initConcrete(PortletSettings settings) -- a concrete portlet is placed into service, parametrized with a
                                               PortletSettings object (see Basic Portlet Objects section)

void destroyConcrete() -- a concrete portlet is taken out of service

void destroy() -- an application portlet is taken out of service

void service(PortletRequest req, PortletResponse res) -- service gets invoked for every client request, based on the
                                                         portlet mode or portlet action, it invokes the appropriate
                                                         actionPerformed, doView, doEdit, etc, method.

void actionPerformed(ActionEvent evt) -- this method is invoked when the portlet receives an action and must be
                                         implemented by the portlet developer. This method is performed before any
                                         rendering is done via doView, doEdit, etc.

void do{View,Config,Edit,Help,Title}(PortletRequest req, PortletResponse res) -- renders the portlet  mode and is
                                                                                 generally implemented by the portlet
                                                                                 developer.

void window{Maximized,Minimized,Closed,Resizing,...}(WindowEvent event) -- method is invoked when the portlet window
                                                                           state changes.


3. Portlet Deployment Descriptors

Because portlets inherit from servlets and are also managed in part by the servlet container, the standard web.xml
file must be augmented to include the names and mappings of portlets as shown in the following sample web.xml snippet:

<web-app>
    <servlet>
        <servlet-name>HelloWorld</servlet-name>
        <servlet-class>org.gridlab.gridsphere.portlets.core.HelloWorld</servlet-class>
    </servlet>

    ...

    <servlet-mapping>
       <servlet-name>HelloWorld</servlet-name>
       <url-pattern>/hello</url-pattern>
    </servlet-mapping>
</web-app>


Portlets are defined in a portlet.xml file which has the following format:

<portlet-app-collection>
    <portlet-app-def>

        <portlet-app ...>
        </portlet-app>

        <concrete-portlet-app ..>
        </concrete-portlet-app>

        <concrete-portlet-app ..>
        </concrete-portlet-app>

    </portlet-app-def>

    <portlet-app-def>
    ...
    </portlet-app-def>

</portlet-app-collection>

A <portlet-app-collection> encompasses all the portlets defined by the <portlet-app-def> tags. Each
<portlet-app-def> contains one <portlet-app> definition and one or more <concrete-portlet-app> definitions that
describes a concrete portlet instance.

The following sample shows a portlet application description for a HelloWorldPortlet:

<portlet-app id="org.gridlab.gridsphere.portlets.core.HelloWorld">
    <portlet-name>Hello World Portlet Application</portlet-name>
    <servlet-name>HelloWorld</servlet-name>
    <portlet-config>
        <param-name>Portlet Master</param-name>
        <param-value>yourid@yourdomain.com</param-value>
    </portlet-config>
    <cache>
        <expires>120</expires>
        <shared>true</shared>
    </cache>
    <allows>
        <maximized/>
        <minimized/>
    </allows>
    <supports>
        <markup name="html">
            <view/>
            <edit/>
            <help/>
            <configure/>
        </markup>
        <markup name="wml">
            <view/>
            <edit/>
            <help/>
            <configure/>
        </markup>
    </supports>
</portlet-app>

A portlet application defines the following information:

<portlet-app id=""> -- The id is defined as the fully qualified classname of the portlet

<portlet-name>      -- (Optional) An identifying name. Currently this is not used.

<servlet-name>      --  This must match the <servlet-name> defined in the web.xml file which provides a mapping
                        between a servlet (portlet) class and the servlet name used to reference the portlet by the
                        portlet container.

<portlet-config>    -- Defines configuration information for this portlet that is accessible via the PortletConfig
                       object described in the section on "Basic Portlet Objects"

<cache>             -- Instructs the portlet conatiner to perform caching of this portlet. Currently not used

<allows>            -- (Optional) Defines the supported window states of this portlet. Possible values include
                       minimized and maximized. If not specified both states are supported.

<supports>          -- (Optional) Defines which portlet modes are supported for various markups. If this is
                       not specified, all modes are enabled.

A concrete portlet description is shown in the following sample snippet:

<concrete-portlet-app id="org.gridlab.gridsphere.portlets.core.HelloWorld.1">
    <context-param>
        <param-name>foobar</param-name>
        <param-value>some value</param-value>
    </context-param>
    <concrete-portlet>
        <portlet-name>Hello World 1</portlet-name>
        <default-locale>en</default-locale>
        <language locale="en_US">
            <title>Hello World - Sample Portlet #2</title>
            <title-short>Hello World</title-short>
            <description>Hello World - Sample Portlet #1</description>
            <keywords>portlet hello world</keywords>
        </language>
        <config-param>
            <param-name>Portlet Master</param-name>
            <param-value>yourid@yourdomain.com</param-value>
        </config-param>
        <owner>
            <group-name>CACTUS</group-name>
            <role-name>ADMIN</role-name>
        </owner>
        <group>
            <group-name>ANY</group-name>
        </group>
        <role>
            <role-name>GUEST</role-name>
        </role>
    </concrete-portlet>
</concrete-portlet-app>

The concrete portlet description defines the following properties:

<concrete-portlet-app id="..."> -- The id provided is the portlet application id (the classname of the portlet) with
                                   an additional digit appended to uniquely identify this concrete portlet instance
                                   among others.

<context-param>                 -- Defines the portlet context information encapsulated by the
                                   PortletApplicationSettings object described in the section on "Basic Portlet Objects"

<concrete-portlet>              -- Defines additional concrete portlet information...

<portlet-name>                  -- The name of this portlet. Currently not used.

<default-locale>                -- The default locale of this portlet.

<language locale="...">         -- Defines additional language support for the defined locale in the following tags:

<title>                         -- The title used by the PortletBorder component to render the portlet title bar.

<title-short>                   -- A more concise title that may be used for rendering portlets in WML enabled devices.

<description>                   -- A brief description of capabilities provided by this portlet.

<keywords>                      -- A list of keywords that can be used to index this portlet from a portlet lookup
                                   service (when one becomes available ;-))

<config-param>                  -- Addtional concrete portlet settings that are maintained in the PortletSettings
                                   object described in the section on "Basic Portlet Objects".

<owner>                         -- Defines the owner/administrator of this portlet defined by a group name and a
    <group-name>                   role name. The owner may redeploy and reconfigure this portlet.
    <role-name>

<group>                         -- Defines the groups that may have access to this portlet. A group-name of ANY
    <group-name>                   allows users in any other group to add this portlet to their subscription list.

<role>                          -- Defines the roles that may have access to this portelt. A role-name of ANY
    <role-name>                    allows users in any role to add this portlet to their subscription list.


4. Basic Portlet Objects

PortletConfig and PortletContext

The PortletConfig and PortletContext objects are wrappers around the standard ServletConfig and ServletContext
objects. In addition the PortletConfig contains information found in the portlet descriptor discussed in the next
section. The PortletContext offers the following addtional methods:

 + String getContainerInfo() -- returns information about the GridSphere portlet container
 + PortletLog getLog() -- returns a logger for the portlet to use
 + int getMajorVersion() -- returns the major version of GridSphere
 + int getMinorVersion() -- returns the minor version of GridSphere
 + PortletService getService(Class service) -- return a portlet service instance (see PortletService-HOWTO)
 + String getText(String bundle, String key, Locale locale) --return localized text. Not implemented yet.
 + void include(String path, PortletRequest request, PortletResponse response) -- used for forwarding control to a
                                                                                  JSP page located at path.

PortletRequest and PortletResponse

The PortletRequest and PortletResponse objects mirror closely the HttpServletRequest and HttpServletResponse
counterparts and offer all the previous methods and some additional portlet specific ones. The following methods
are defined by the PortletRequest:

 + Client getClient() -- returns a Client object representing the browser device being used by the client
 + PortletData getData() -- returns the user-specific persistent data for the active portlet
 + Portlet.Mode getMode() -- returns the Mode the portlet is running in e.g. Portlet.Mode.CONFIGURE, Portlet.Mode.VIEW
 + PortletSession getPortletSession() -- returns the portlet session for this user
 + PortletSettings getPortletSettings()  -- return the concrete portlet settings
 + Portlet.Mode getPreviousMode() -- return the previous portlet mode of this portlet
 + User getUser() -- return the User object
 + PortletWindow getWindow() -- return the portlet window representing the window state of this portlet
 + void setModeModifier(Portlet.ModeModifier modeModifier) -- sets the next portlet mode to display

Client
The Client defines the user's browser type and supported mime-types. The purpose of the client object is to allow
portlet developers with mechanisms for customizing output based on device type. The client object can be used to detect
a browser that may be running on a cell phone or wireless PDA.

PortletData
The PortletData defines any user specific persistent information for the active portlet. In the example stock quote
portlet, the PortletData could be used to store a user's financial information, past trades made, etc.

Portlet.Mode
The PortletMode is the current mode of the active portlet. The allowed modes are Portlet.Mode.VIEW, Portlet.Mode.EDIT,
Portlet.Mode.CONFIGURE, and Portlet.Mode.HELP.

PortletSession
The PortletSession is another wrapper for an HttpSession and offers the standard setAttribute/getAttribute methods for
storing data in a HttpSession.

PortletSettings
The PortletSettings encapsulates concrete portlet information and is configurable by the portlet administrator. The
PortletSettings provides access to the portlet's title, PortletApplicationSettings and configuration attributes from
from the concrete portlet definition in the portlet.xml file.

PortletWindow
The PortletWindow provides window state information about the currently active portlet such as minimized or maximized.

Portlet.ModeModifer
The Portlet.ModeModifier is supposed to

PortletResponse
Like the PortletRequest, the PortletResponse is a wrapper for HttpServletResponse and offers all the same methods via
an actual proxy HttpServletResponse object. In addition, the PortletResponse provides support for creating customized
URI's (Uniform Resource Identifiers) used to construct portlet links.


5. Portlet Packaging

Portlets are packaged as web applications following the same guidelines outlined in the Sun Java Servlet specification.
The following example shows the directory structure of a portlet (web archive format) WAR file.

/
/images
/jsp
/html
/WEB-INF/
    web.xml
    portlet.xml
/WEB-INF/lib
/WEB-INF/classes
/META-INF

Publicly accessible images and web pages can be placed in the images, jsp or html directories, while WEB-INF contains
configuration information including the web.xml and portlet.xml used to provide the servlet and portlet containers with
configuration information about the packaged portlets. Compiled portlets are placed in the WEB-INF/classes or packaged
as a JAR in WEB-INF/lib.

6. Writing a HelloWorld Portlet


7. Other Resources

    -- IBM Portal Developer's Zone  http://
        -- IBM WebSphere 4.1 Portlet Developers Guide












