
<!--

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

    Author:     Jason Novotny
    Version:    $Id$
-->

<chapter id="gpdk">
    <title>The GPDK Portlet Development Model</title>
    <para>
        It is possible to construct portlets based on the existing &GPDK;
        Model-View-Controller (MVC) model for web application development.
    </para>

    <sect1 id="gpdk.intro"><title>GPDK Architecture</title>
        <para>
        In the GPDK model, web application logic is separated into <classname>Page</classname> objects and presentation
        JSP pages. Following the Command pattern, The Page object implements the
            <classname>PageCommand</classname> interface which provides a <methodname>execute</methodname>
            method that is used to place all business logic. In the GPDK event lifecycle, page objects are first
            executed and then a presentation JSP page is rendered. The <methodname>execute</methodname> method of
            the implemented <classname>Page</classname> object returns a &String; that defines the JSP page used
            for presentation. In the GPDK model of web application development the <classname>GPDKServlet</classname>
            acted as the controller to switch control from the logic Pages and the presentation JSP's with the aid of
            the <filename>pages.config</filename> mapping file defining the relationships between portal actions, a
            <classname>Page</classname> object and a presentation JSP page. An example <filename>pages.config</filename>
            is shown below:
            <screen>
                <literallayout>
            # Pages registration file
            #
            # page action name      Page class            JSP presentation page

            # portal administrator pages
            admin                    BasicAdminPage           admin/status.jsp
            updateresources     UpdateResourcePage      admin/status.jsp
            viewlogs                 BasicPage                   admin/viewlogs.jsp

           </literallayout>

            </screen>
            This mapping file dictates that when an action of say "admin" occurs then the
            <classname>BasicAdminPage</classname> should be executed and the <filename>admin/status.jsp</filename>
            JSP page rendered. The <classname>BasicPage</classname> is actually a non-action Page object
            that just forwards control to the presenation page without performing any logic.
        </para>

    </sect1>

    <sect1 id="gpdk.model"><title>GPDK Portlet Model</title>
        <para>
            The GPDK model is complementary to the GridSphere portlet framework by providing a model for portlet page
            navigability that is lacking in the Portlet API itself. Developing Portlets using only the Portlet API
            is no less cumbersome than the development of servlets using the Servlet API, so the GPDK model provides
            an architecture for making advanced portlet development easier. While the overall design has remained the
            same some method names have been changed to follow the GridSphere conventions.
            The existing <filename>pages.config</filename> mapping file has been updated to follow an XML schema that
            looks like the following:

        <screen>
            <literallayout>
              <![CDATA[

                <portlet-pages>
                    <portlet-page
                        concrete-portlet="org.gridlab.gridsphere.portlets.core.login.LoginPortlet.1"
                        base-page-class="org.gridlab.gridsphere.portlets.core.login.pages">
                        <page>
                            <action>VIEW</action>
                            <implementation>DefaultActionPage</implementation>
                            <presentation>login/login.jsp</presentation>
                        </page>
                        <page>
                            <action>gs_login</action>
                            <implementation>LoginPage</implementation>
                            <presentation>login/login.jsp</presentation>
                        </page>

                        ....
                        ]]>
            </literallayout>

        </screen>
        The new pages descriptor file enhances the existing properties file by requiring a reference
        to the concrete portlet since multiple portlets may be active in a portal page at any time. It is up
            to the portlet developer to provide default &lt;page&gt; definitions for VIEW, EDIT, CONFIGURE and HELP
            actions when those modes are selected for the specified concrete portlet.
       </para>
        <para>
            Now instead of subclassing from &AbstractPortlet; a portlet must subclass <classname>GPDKPortlet</classname>
            to gain the GPDK controller logic. In fact unless, additional functionality is required in the overall
            portlet lifecycle methods, it's possible to simply supply &ActionPage; objects and the necessary
            JSP pages only.

            Under the GPDK Portlet model, the following methods are defined by the <classname>PageCommand</classname>
            interface which are implemented by all &ActionPage; objects.
            <informalexample id="gpdk.page.ifc">
                <programlisting>
            <literallayout>

                /**
                 * Returns the JSP presentation page
                 *
                 * @return the JSP presentation page
                 */
                public String getPage();

                /**
                 * Allows the Page to initialize itself with the current portlet configuration
                 *
                 * @param config the PortletConfig
                 */
                public void initPage(PortletConfig config);

                /**
                 * Allows the concrete Page to initialize itself with the current portlet settings
                 *
                 * @param settings the PortletSettings
                 */
                public void initConcretePage(PortletSettings settings);

                /**
                 * Allows the concrete Page to destroy any resources created during its usage
                 *
                 * @param settings the PortletSettings
                 */
                public void destroyConcretePage(PortletSettings settings);

                /**
                 * Allows the Page to destroy any resources that have been created during its usage
                 *
                 * @param config the PortletConfig
                 */
                public void destroyPage(PortletConfig config);

                /**
                 * Execute defines a handler that is invoked by the servlet
                 * when a request for the given page is received.
                 *
                 * @param evt the action event
                 *
                 * @return a String containing the web page to forward control to
                 *
                 * @throws CommandException if the action mapping Page is not found
                 * @throws PortletException if an error occurs during page execution
                 */
                public String actionPerformed(ActionEvent evt) throws PortletException, CommandException;

            </literallayout>
                </programlisting></informalexample>
           As you can see, the lifecycle methods defining the <classname>PageCommand</classname> interface look a lot
            the Portlet lifecycle methods making Page development the same as Portlet development without
            the doXXX methods for rendering presentation. Developers can use the init and initConcrete methdos
            to perform any required Page initialization and the destroy, destroyConcrete methods for freeing
            any consumed resources.
          </para>
        <para>
            To simplify development a new Page would subclass the &DefaultActionPage; The &DefaultActionPage;
            is the new equivalent of the former BasicPage object in GPDK that is an action-less Page that
            only forwards to the presentation JSP.
        </para>
    </sect1>

    <sect1 id="gpdk.recipe"><title>GPDK Recipe for Portlet Development</title>
        <para>
            The following steps describe how to develop a portlet under the GPDK model:
         </para>
            <orderedlist>
                <listitem>
                    Create a new portlet that subclasses GPDKPortlet or just use the GPDKPortlet.
                    Unless you wish to override default doTitle methods and/or perform additional
                    routines in the standard portlet lifecycle methods, you can just use GPDKPortlet
                    as it is and implement the Page objects.
                </listitem>
                <listitem>
                   Follow the standard steps for Portlet development e.g. edit <filename>portlet.xml</filename>,
                    <filename>layout.xml</filename> and <filename>web.xml</filename>. If the existing GPDKPortlet
                    is used, then the portlet.xml should look like:
                    <programlisting>
                        <literallayout>
                                     <![CDATA[
    <portlet-app-def>
        <portlet-app id="org.gridlab.gridsphere.provider.gpdk.GPDKPortlet">
            <portlet-name>Login</portlet-name>
            <servlet-name>LoginPortlet</servlet-name>
        </portlet-app>

        <concrete-portlet-app id="org.gridlab.gridsphere.provider.gpdk.GPDKPortlet.1">
            <concrete-portlet>
                <portlet-name>A GPDK model portlet</portlet-name>
                     ...
                       ]]>
                    </literallayout>
                    </programlisting>
                </listitem>
                <listitem>
                Create a <filename>pages.xml</filename> mapping file. This file is placed with other XML
                descriptor files in <filename>webapps/WEB-INF/pages.xml</filename> and is used for all GPDK
                model portlets in this web application. Below is an example <filename>pages.xml</filename>:
               <informalexample id="gpdk.def"> <programlisting>


&lt;portlet-pages&gt;
    &lt;portlet-page concrete-portlet="org.gridlab.gridsphere.provider.gpdk.GPDKPortlet.1" <co id="gpdk.conc.def"/>
                  base-page-class="org.myorg.portlets.pages"&gt; <co id="gpdk.basepg.def"/>
        &lt;page&gt;
            &lt;action&gt;VIEW&lt;/action&gt; <co id="gpdk.action.def"/>
            &lt;implementation&gt;DefaultActionPage&lt;/implementation&gt;  <co id="gpdk.baseimpl.def"/>
            &lt;presentation&gt;view.jsp&lt;/presentation&gt; <co id="gpdk.pres.def"/>
        &lt;/page&gt;
        &lt;page&gt;
            &lt;action&gt;do_something&lt;/action&gt;             <co id="gpdk.newaction.def"/>
            &lt;implementation&gt;MyActionPage&lt;/implementation&gt; <co id="gpdk.impl.def"/>
            &lt;presentation&gt;view.jsp&lt;/presentation&gt;
        &lt;/page&gt;
        &lt;page&gt;
            &lt;action&gt;CONFIGURE&lt;/action&gt;
            &lt;implementation&gt;DefaultActionPage&lt;/implementation&gt;
            &lt;presentation&gt;configure.jsp&lt;/presentation&gt;
        &lt;/page&gt;

        ...
    &lt;/portlet-page&gt;

    &lt;portlet-page concrete-portlet="org.myorg.portlets.CoolPortlet.1"
                  base-page-class="org.myorg.portlets.pages"&gt;

                  ...

    &lt;/portlet-page&gt;

 &lt;/portlet-pages&gt;

                    </programlisting>
                   <calloutlist>
            <callout arearefs="gpdk.conc.def">
            <para>
            The <varname>concrete-portlet</varname> element defines which portlet these action mappings should apply to.
            </para>
            </callout>
            <callout arearefs="gpdk.basepg.def">
            <para>
            The <varname>base-page-class</varname> element specifies the path used for locating all new Page
            objects. The <varname>base-page-class</varname> is a convenience so that one doens't have to specify the
                fully qualified Page classname for all &ActionPage;s.
            </para>
            </callout>
            <callout arearefs="gpdk.action.def">
            <para>
            The <varname>action</varname> element defines the String action name used to decide which &ActionPage;
            to execute. The <emphasis>VIEW</emphasis>, <emphasis>CONFIGURE</emphasis>, <emphasis>EDIT</emphasis>, and
                <emphasis>HELP</emphasis> actions must be defined for any portlet that wishes to provide these modes.
            </para>
            </callout>
            <callout arearefs="gpdk.baseimpl.def">
            <para>
            The <varname>implementation</varname> element defines the &ActioPage; implementation to use. A &DefaultActionPage;
            can be used if no logic is required before displaying the presentation page. This is generally the case
                when an action is used strictly for navigation. Otherwise, a new &ActionPage; can extend from
                the &DefaultActionPage; and provide implementations for the interface methods
                <link linkend="gpdk.page.ifc">described previously</link>.
            </para>
            </callout>
           <callout arearefs="gpdk.pres.def">
            <para>
            The <varname>presentation</varname> element defines the name of the JSP presnetation page used for
                rendering after the completion of the corresponding &PageAction; object. The JSP page is located
                relative to the <filename>jsp/</filename> directory in the portlet web application.
            </para>
            </callout>
            <callout arearefs="gpdk.newaction.def">
            <para>
                Generally a new action is created using the Tag library by using one of the actionlink,
                actionform or actionsubmit UI tags (See Portlet UI tag Library for more information) or it can be
                created via the &PortletURI; object obtained form the &PortletResponse; in an &ActionPage; object.
            </para>
            </callout>
            </calloutlist>
            </informalexample>
            </listitem>
            <listitem>
            Create the necessary &ActionPage; implementations
            </listitem>
            <listitem>
            Create the necessary JSP presentation pages
            </listitem>
          </orderedlist>
    </sect1>

</chapter>
