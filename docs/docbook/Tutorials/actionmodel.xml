<!--

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

    Author:     Jason Novotny
    Version:    $Id$
-->

<chapter id="actionmodel">
    <title>The GridSphere Action Provider Model</title>
    <para>
        As an advanced feature, GridSphere enhances the existing Portlet API with
        an Action Portlet Provider model for developing more sophisticated portlets.
    </para>

   <sect1 id="actionmodel.intro"><title>Introduction</title>
        <para>
        As described previously and in the Reference Guide, portlet development generally involves
        the implementation of an actionPerformed method and the doXXX render methods. In the general
        portlet lifecycle, the doView is invoked initially (when there is no inital action) which can
        produce output by using the &PortletResponse; to write directly to the output stream or by
        using the &PortletContext; to include a Java Server Page (JSP) used for presentation. In the
        typically the presentation of a portlet will consist of standard HTMl elements including forms,
        checkboxes, input fields, submit buttons and other elements. Certain elements including
        hyperlinks, forms and submit buttons will generate actions that are trapped and used in the
        actionPerformed method of a portlet. The &ActionEvent; object available in the actionPerformed
        method of the portlet is used to obtain the name of the action that occurred. Once you start
        to develop more sophisticated portlets using the standard portlet API, you soon discover that
        the actionPerformed method contains a lot of the following logic:
            <programlisting>
            public actionPerformed(ActionEvent event) throws PortletException  {
                String actionName = event.getAction().getName();
                if (actionname.equals("dothis")) {
                    doThis();
                } else if (actionname.equals("dothat")) {
                    doThat();
                } else if ....

                }
            }
            </programlisting>
        As you can see, the actionPerformed method can potentially contain a lot of branching logic
        that makes the code less readable.
        </para>
       <para>
        In the GridSphere Action Provider model, the &ActionPortlet; acts as an intelligent dispatcher
        that hides the above branching logic from a portlet developer by following a simple convention:
        The action method invoked is defined by the action name of the HTML action element. So in the
        case of a form or submit button, the name attribute in the HTML is used to define a method name
        that will be invoked by the portlet that subclasses from &ActionPortlet;. Hence, if an action
        such as <methodname>getStockQuotes</methodname>() is defined in the  name of the submit button
        in the presentation, this will trigger the <methodname>getStockQuotes</methodname>() method to be
        invoked by a <classname>StockQuotePortlet</classname> which subclasses from &ActionPortlet;
       </para>
       <para>
        The &ActionPortlet; provides a few additional helper methods that are used for portlet navigation.
        The <methodname>getNextPage</methodname> and <methodname>setNextPage</methodname> methods are used
        after the completion of an action method to set the next presentation page that should be rendered.
        The page can be specified as either a JSP file or another render method that will get invoked (which
        can then call setNextPage with a supplied JSP page to perform an include of a JSP page upon completion.)
        The following sample code illustrates how this works:
           <programlisting>
               public void doThis(FormEvent event)
                    // perform some business logic
                    Portlet req = event.getPortletRequest();
                    setNextPage(req, "dothis.jsp");

                    // OR

                    setNextPage(req, "renderThis");
               }

               public void renderThis(PortletRequest req, PortletResponse res) {
                    getPortletConfig().getContext().include("dothis.jsp", req, res);
               }
           </programlisting>
        In both cases the result is the same. Either the next page is set to a JSP which will
        get rendered, or the <methodname>renderThis</methodname> method is invoked which will include the same JSP page.
        A recommended approach is to use a portlet render method if additional logic needs to be performed such that
        the JSP page that is finally included (if any at all) is used purely for presentation and includes the
        minimum amount of logic as possible.
       </para>
       <para>
           In the previous example, you can see that the action methods provide the portlet developer with a
           &FormEvent; object instead of the standard &ActionEvent; object that is used in the
           <methodname>actionPerformed</methodname> method. Under the Action Portlet provider model,
           the &FormEvent; is a decorator for an &ActionEvent; and provides additional methods for interacting
           with forms as explained in the next section.
       </para>
   </sect1>

    <sect1 id="beansandtags"><title>Forms, Beans and Tags</title>
    <para>
    While the &ActionPortlet; makes development easier by handling the dispatching logic necessary for
    complex portlet navigation and action event handling, GridSphere provides additional utilities to make the
    development of portlet presentation easier by borrowing from the visual programming paradigm. The
    design of useful portlet interfaces lies in the domain of JSP/HTML/CSS/DHTML development. As anyone with
        experience in user interface design knows, HTML is a very poor substitute for the widget-rich toolkits and
    frameworks one would get by using Swing, Visual Basic or any other graphics toolkit. To make developing web
        user interfaces easier for non-graphic design professionals, we have wrapped most standard HTML elements
    into a reusable Java Tag library, known as the Portlet User Interface (UI) tag library. The UI tags seek to provide
    more feature rich visual components that are configured with a default look and feel using CSS internally, so that
        portlet developers need not invest a lot of time in CSS development for decent looking web interfaces.
        The following example illustrates how the Portlet UI tag library would be used in a presentation JSP to
        construct a form:
        <programlisting>
      <![CDATA[
<ui:form>
    <ui:panel>
        <ui:frame>
            <ui:tablerow>
                <ui:tablecell width="100">
                    <ui:text key="PRICE"/>
                </ui:tablecell>
                <ui:tablecell width="60">
                    <ui:textfield name="password" size="20" maxlength="20"/>
                </ui:tablecell>
                <ui:tablecell/>
            </ui:tablerow>
        </ui:frame>

        <ui:frame>
            <ui:tablerow>
                <ui:tablecell width="100">
                    <ui:actionsubmit action="getQuotes" name="login" key="QUOTE_ACTION"/>
                </ui:tablecell>
                <ui:tablecell/>
            </ui:tablerow>
        </ui:frame>
    </ui:panel>
</ui:form>]]>
        </programlisting>

    </para>
    </sect1>


</chapter>