
<!--

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

    Author:     Jason Novotny, Oliver Wehrens
    Version:    $Id$
-->

<chapter id="thirdparty">
    <title>Third-Party Portlets</title>
    <para>
        Gridsphere provides capabilities for easily developing and deploying third-party
        portlets. This chapter will describe how to do so.
    </para>

    <sect1 id="newproject">
        <title>Creating a new project</title>
        <para>
            First, issue the following GridSphere build script command to create a hello world tutorial project.
            <screen>
<prompt>bash$</prompt> <command>ant <replaceable>new-project</replaceable>
            </command>
...
new-project:
     [echo] Creating a New Portlet Project
    [input] Please enter a Project Title e.g. Cool Portlets
    <command>Hello World Example</command>
    <prompt>Tutorial Portlets</prompt>
    [input] Please enter a Project Name this will be used for your portlet web application
            and should be lowercase e.g. coolportlets
    <command>tutorial</command>

    check-project-exists:
    [mkdir] Created dir: /Users/novotny/gridsphere/projects/tutorial
    [input] Do you wish to develop GridSphere/WebSphere portlets or JSR 168 portlets? Enter gs or jsr (gs,jsr)
    <command>gs</command>
...
            </screen>
            At the first prompt a description of the portlet package (or one portlet) is provided.
            After that a project name is provided which defines the web application name that will be used to identify the
            web application to the servlet container. In this case, the web application name is simply <command>tutorial</command>.

            In addition, you must specify whether this is a JSR portlet application or a GridSphere portlet
            application. Depending on which option is chosen, the proper template descriptor files will
            will be placed in the new project. Please see the JSRPortletGuide docbook for more information
            on developing JSR 168 compliant portlet applications.

            In the above example a package called 'tutorial' will be created in the projects directory
            of gridsphere. The directory structure is automatically created and the required template files are copied
            to over to the new project. At the moment it is required that all portlet projects are maintained in the
            <filename>projects</filename> directory in the gridsphere home directory.
            Once you have a new project you may optionally commit it to CVS issuing the following:
            <screen>
            <prompt>bash$ </prompt><command>cd tutorial</command>
            <prompt>bash$ </prompt><command>cvs import -m "a hello example" tutorial VENDORTAG STARTTAG<replaceable>tutorial</replaceable>
            </command>
                </screen>
            where STARTTAG and VENDORTAG are any labels of your choosing (see CVS documentation for more detailed information)
        </para>
    </sect1>

    <sect1 id="HelloWorldPortlet">
        <title>Hello World</title>

            <sect2 id="helloworldsrc">
            <title>First Portlet</title>
                After creating the new project you are ready to write your first portlet. First you need to create
                a directory for the portlet source code. We create a portlets directory containing a tutorial directory.
                <screen>
            <prompt>bash$ </prompt><command>cd src</command>
            <prompt>bash$ </prompt><command>mkdir -p portlets/examples</command>
                </screen>
                Now create a source file <filename>HelloWorld.java</filename> inside the
                <filename>portlets/examples</filename> directory that looks like the following:

                <example>
                    <title>HelloWorld.java</title>
                    <programlisting linenumbering='numbered'>
package portlets.examples;

public class HelloWorld  extends AbstractPortlet {

    public void doView(PortletRequest request, PortletResponse response)
         throws PortletException, IOException {
        PrintWriter out = response.getWriter();
        out.println("&lt;h1&gt;Hello World&lt;/h1&gt;");
    }
}
                    </programlisting>
                </example>
                All portlets need to extend AbstractPortlet (line 3). In this example we just implement
                the view mode of the portlet. This outputs just a simple html string to the page.
            </sect2>

            <sect2 id="portletdescriptor">
                <title>Portlet Deployment Descriptor</title>
                <para>
                    The next step in order to deploy the portlet is to write the portlet descriptor. During the init process
                    (ant new-project) all needed template files were copied to the proper locations.
                    The descriptor file is <filename>webapp/WEB-INF/portlet.xml</filename> and it should look like the
                    following example. Please make sure the portlet-app-id matches the portletclass name and the
                    concrete-portlet-app-id matches it as well plus a numeric identifier.  Furthermore check if the
                    servlet-name matches the servlet-name defined in web.xml. See down for more information on this.

                    <example>
                        <title>Tutorial portlet descriptor - portlet.xml</title>
                    <programlisting>
                    <![CDATA[
<portlet-app-collection>

<portlet-app-def>

<portlet-app id="portlets.examples.HelloWorld">
    <portlet-name>Hello World Portlet Application</portlet-name>
    <servlet-name>HelloWorld</servlet-name>
    <portlet-config>
        <param-name>Portlet Master</param-name>
        <param-value>yourid@yourdomain.com</param-value>
    </portlet-config>
    <allows>
        <maximized/>
        <minimized/>
        <resizing/>
    </allows>
    <supports>
        <view/>
        <edit/>
        <help/>
        <configure/>
    </supports>
</portlet-app>

<concrete-portlet-app id="portlets.examples.HelloWorld.1">
    <context-param>
        <param-name>foobar</param-name>
        <param-value>a value</param-value>
    </context-param>
    <concrete-portlet>
        <portlet-name>Hello World</portlet-name>
        <default-locale>en</default-locale>
        <language locale="en_US">
            <title>Hello World</title>
            <title-short>Hello World</title-short>
            <description>Hello World - Sample Portlet #1</description>
            <keywords>portlet hello world</keywords>
        </language>
        <config-param>
            <param-name>Portlet Master</param-name>
            <param-value>yourid@yourdomain.com</param-value>
        </config-param>
    </concrete-portlet>
</concrete-portlet-app>

</portlet-app-def>

</portlet-app-collection>
            ]]>
                    </programlisting>
                    </example>
            </para>

        </sect2>

        <sect2 id="layoutdescriptor">
                <title>Portlet Layout Descriptor</title>
                <para>
                    The layout descriptor defines the default layout of the portlet web application as it rendered
                    to the portal and is defined within portlet-tabbed-pane tags.
                    The descriptor file is <filename>webapp/WEB-INF/layout.xml</filename> and it should look like the
                    following example.

                    <example>
                        <title>Tutorial Layout Descriptor - layout.xml</title>
                    <programlisting>
                    <![CDATA[
<portlet-tabbed-pane>
    <portlet-tab>
        <title>Examples</title>
        <portlet-tabbed-pane style="sub-menu">
            <portlet-tab>
                <title lang="en">Hello World</title>
                <portlet-panel>
                    <table-layout>
                        <column-layout>
	                        <portlet-frame>
                                <portlet-class>portlets.examples.HelloWorld.1</portlet-class>
                            </portlet-frame>
                        </column-layout>
                    </table-layout>
                </portlet-panel>
            </portlet-tab>
        </portlet-tabbed-pane>
    </portlet-tab>
</portlet-tabbed-pane>
            ]]>
                    </programlisting>
                    </example>
            </para>

        </sect2>

        <sect2 id="web.xml">

                <title>web.xml</title>

            The other file which needs to be modified is <filename>webapp/WEB-INF/web.xml</filename>. Here you
            need to modify the servlet tag. Make sure you match the servlet-name  you defined above in
            <filename>webapp/WEB-INF/portlet.xml</filename>.
            The same applies to servlet-class. It must be the same as defined in <filename>webapp/WEB-INF/portlet.xml</filename>
            <example><title>HelloWorld.java - web.xml</title>
            <programlisting>
 <![CDATA[
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2.3.dtd">

<web-app>
    <display-name></display-name>

    <description>
        Provides
    </description>

    <servlet>
        <servlet-name>HelloWorld</servlet-name>
        <servlet-class>portlets.examples.HelloWorld</servlet-class>
    </servlet>

    <servlet-mapping>
       <servlet-name>HelloWorld</servlet-name>
       <url-pattern>/hello</url-pattern>
    </servlet-mapping>

    <mime-mapping>
      <extension>wbmp</extension>
      <mime-type>image/vnd.wap.wbmp</mime-type>
    </mime-mapping>

    <mime-mapping>
      <extension>wml</extension>
      <mime-type>text/vnd.wap.wml</mime-type>
    </mime-mapping>

    <mime-mapping>
      <extension>wmls</extension>
      <mime-type>text/vnd.wap.wmlscript</mime-type>
    </mime-mapping>

</web-app>
]]>
            </programlisting>
            </example>
        </sect2>
        <sect2 id="hello world deploy">
            <title>Deploy the portlet</title>
            To deploy the <filename>HelloWorld</filename> Portlet simply issue:
            <screen>
<prompt>bash$</prompt> <command>ant <replaceable>deploy</replaceable></command>
            </screen>
            in the home directory of the your project. Your portlet is now deployed to
            gridsphere.
        </sect2>

        <sect2 id="modify gridsphere">
            <title>Register with gridsphere</title>
            The final step is to register the portlet with gridsphere. First you have to
            edit the <filename>PortletMaster.xml</filename> to register your project
            with gridsphere. Either you use the deployed file in <filename>$CATALINA_HOME/gridsphere/WEB-INF/PortletMaster.xml</filename>
            or you use the one in your gridsphere sourcedir. There it is located in <filename>webapps/gridsphere/WEB-INF/PortletMaster.xml</filename>.
            If you use the one in the gridsphere sourcedir you need to redeploy gridsphere.
            <example>
                <title>HelloWorld.java - config/PortletMaster.xml</title>

            <programlisting>
<![CDATA[
<portlet-services>
    <service>
        <name>Portlet Manager Service</name>
        <user-required>true</user-required>
        <description>Provides Administration Capabilities for Portlet Web Applications</description>
        <interface>org.gridlab.gridsphere.services.core.registry.PortletManagerService</interface>
        <implementation>org.gridlab.gridsphere.services.core.registry.impl.PortletManagerServiceImpl</implementation>
        <service-config>
            <param-name>startup-portlet-webapps</param-name>
            <param-value>gridsphere, tutorial</param-value>
        </service-config>
    </service>
</portlet-services>
]]>
            </programlisting>
            </example>
            The last part is to optionally edit the <filename>$CATALINA_HOME/gridsphere/GuestUserLayout.xml</filename> or
            the <filename>config/layouts/GuestUserLayout.xml</filename> in the source directory of gridsphere in order
            to make the new portlet available to guest users. If you
            choose the second way you have to redeploy gridsphere.
            The <filename>GuestUserLayout.xml</filename> should have a section inside some grid-layout tag which
            looks like this:
            <example>
                <title>HelloWorld.java - GuestUserLayout.xml</title>
                <programlisting>
            <![CDATA[
<portlet-frame inner-padding="20">
    <name>RSS</name>
    <portlet-class>portlets.examples.HelloWorld.1</portlet-class>
</portlet-frame>
]]>
            </programlisting>
            </example>
        </sect2>

    </sect1>
</chapter>
