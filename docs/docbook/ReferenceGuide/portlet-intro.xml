<!--

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

    Author:     Jason Novotny
    Version:    $Id$
-->

<chapter id="portlet-intro">
    <title>Portlet Concepts</title>
    <para>
    Portlets are defined as visual components that can be assimilated into portal web pages. Portlets
    provide "mini-applications" that can either display informational content or provide access to other services. The
    GridSphere portal allows users to customize their workspace by adding and removing portlets as needed. In addition
    to standard window states like minimized or maximized, portlets can also provide various "modes". The standard portlet
    modes are <emphasis>view</emphasis>, <emphasis>edit</emphasis>, <emphasis>configure</emphasis> and
    <emphasis>help</emphasis>. As an example, consider a stock quote portlet that allows users to
    customize their stock quote information. View mode would display a user's stock information. Help mode provides users
    with informational content about the stock quote portlet and how to use it. Edit mode allows users to change the list
    of stocks they are intersted in monitoring. Finally, <emphasis>configure</emphasis> mode allows portlet
    administrators to change persistent settings such as the stock quote service that is contacted.
    </para>
    <para>
    In the GridSphere framework, portlets inherit from servlets which are defined in Sun's Servlet Specification.
    Hence, the GridSphere framework is packaged as a web application that provides a portlet container for managing
    deployed portlets. Portlets are intended to be administered dynamically and portlet administrators can deploy
    and undeploy portlets to the container.
    </para>
    <para>
    Because portlets extend from servlets, portlets are packaged as web applications according to the Java Servlet
    Specification as Web ARchive (WAR) files just as any other distributable web application. Within a Portlet Web
    Application, a portlet descriptor file explained in more detail in the next section, is used to describe the
    portlet's properties and initialization information. A Portlet definition consists of an application portlet and
    one or more concrete portlets. Application portlets are defined to be the portlets as servlets where a single
    instance exists for the duration of the portlet container. A concrete portlet instance is an application portlet
    parameterized with additional data found in the portlets's deployment descriptor (see next section). For
    instance, it's possible to provide access to multiple stock quote portlets that may have different configuration
    settings or allow access to a different set of groups, etc.
    </para>
    <para>
    The GridSphere framework provides built-in support for access control based upon the Role Based Access
    Control (RBAC) model. GridSphere uses portlet web applications to define groups. Users may belong to one or more
    groups (meaning they have access to one or more portlet web applications) and they have a <emphasis>role</emphasis>
    within each group. the four supported roles are <emphasis>GUEST</emphasis>, <emphasis>USER</emphasis>,
    <emphasis>ADMIN</emphasis> and <emphasis>SUPER</emphasis>. A user with the GUEST role will obtain a generic view of
    the portal suitable to guests while a user that has logged on, will have the USER role and may be able to see the
    portlet personalized with their settings. A user with the ADMIN role can have access to a portlet's CONFIGURE mode
    described earlier and presumably configure a portlet's initialization settings. A user possesing the SUPER role can
    essentially do anything they want to any portlet and is essentially equivalent to having root access in an
    operating system.
    </para>
    <para>
    The Portlet API explained in greater detail in <link linkend='portlet-objects' endterm="portlet-objects-title"/>
    provides a much richer interface for web programming than the standard servlet model. In addition to providing
    information about the current portlet mode and window state, the API provides access to the portal user including
    group and role information using the <link linkend='portlet-objects'>GridSphere access control model</link>.
    </para>
    <para>
    The Portlet Services API described in <link linkend='portlet-services' endterm="portlet-services-title"/>
    provides a very clean approach for the creation of reusable "services" that perform a set
    of tasks for a given portlet. Using the portlet API, a service instance can be obtained providing the portlet with
    additional functionality.
    </para>
    <para>

    <figure>
        <title>Portlet Web Applications and the Portlet Lifecycle</title>
        <graphic fileref="lifecycle.png"/>
    </figure>
    </para>

    <para>
    The following inheritance hierarchy describes the relationship between servlets and portlets:
            <itemizedlist>
            <listitem>&HttpServlet;</listitem>
            <listitem>&Portlet;</listitem>
            <listitem>&PortletAdapter;</listitem>
            <listitem>&AbstractPortlet;</listitem>
            <listitem><classname>com.mycom.MyPortlet</classname></listitem>
            </itemizedlist>
    In general to reap the benefits of the GridSphere portlet model, a developer would create a new portlet
    which subclasses from the &AbstractPortlet; class and implement the lifecycle methods detailed in the next section.
    </para>

</chapter>
