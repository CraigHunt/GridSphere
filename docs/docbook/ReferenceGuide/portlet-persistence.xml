<!--

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

    Author:     Jason Novotny
    Version:    $Id$
-->

<chapter id="portlet-persistence">
    <title>Portlet Persistence</title>
    <para>
        GridSphere provides a persistence framework implemented using &Hibernate; Persistence Layer.
        It provides methods to store objects to a SQL based database and supports many database types.
    </para>
    <sect1>
        <title>Configuration</title>
        <para>
        The configuration file for the <link linkend='persist'>&PersistenceManager;</link> is
        <filename>$GRIDSPHERE_SOURCE/webapps/gridsphere/WEB-INF/persistence/hibernate.properties</filename>.
        For the available configuration options please see the &Hibernate; website. By default it is configured
        to use HSQL, a pure Java in-memory database useful for testing and development.
        For a production environment we strongly recommend to use a standalone database such as MySQL, etc.
        </para>
    </sect1>
    <sect1>
        <title>Simple Persistence</title>
        <para>Making data persistent in portlets is done using the <link linkend='portlet.data'>&PortletData;</link>
        object under WebSphere portlet API and the <link linkend='portlet.data'>&PortletPreferences;</link> object
        using the JSR 168 portlet API.</para>
        <para>
            In general when requiring persistence in a WebSphere portlet, first see if the
            <link linkend='portlet.data'>&PortletData;</link> object can meet your needs. Although, it only provides
            a container for simple &String; key/value pairs it can go a long way.
            <informalexample>
                <programlisting>
                    PortletData pd = request.getData();
                    pd.setAttribute("key", value);
                    try {
                    pd.store();
                    } catch (IOException e) {
                    // something went wrong while storing the data!
                    }
                </programlisting>
            </informalexample>
            This would store the String value under the key 'key'. Getting data back is as easy
            as storing data. If no value is found <classname>null</classname> is returned.
            <informalexample>
                <programlisting>
                    PortletData pd = request.getData();
                    String value = pd.getAttribute("key");
                </programlisting>
            </informalexample>
            PortletData saved values are on a per user basis.
        </para>
        <para>
            JSR 168 provides a <link linkend='portlet.preferences'>&PortletPreferences;</link>
            object available from the <link linkend='portlet.data'>&PortletRequest;</link>. It can also store key-value
            pairs (only in the processAction method and not in a render method).
            <informalexample>
                <programlisting>
                            PortletPreferences prefs = request.getPreferences();
                            prefs.setValue("key", value);
                            try {
                            prefs.store();
                            } catch (IOException e) {
                            // something went wrong while storing the data!
                            }
                </programlisting>
            </informalexample>
                    This would store the String value under the key 'key'. Getting data back is as easy
                    as storing data. If no value is found <classname>null</classname> is returned.
            <informalexample>
                <programlisting>
                            PortletPreferences prefs = request.getPreferences();
                            String value = prefs.getValue("key");
                </programlisting>
            </informalexample>
                    PortletPreferences saved values are on a per user basis.
        </para>


    </sect1>
    <sect1>
        <title>The Persistence Manager</title>
        <para>
            The
            <classname>PersistenceManagerRdbms</classname> interface defines methods for retrieving, creating, updating
            and deleting objects from the database. A
            <classname>PersistenceManagerException</classname> is thrown in the
            case that an error occurs.
        </para>
        <sect2>
            <title>Mapping files</title>
            <para>
                In order to persistent your own objects you need to write hibernate mapping files.
                These have go into the
                <filename>$PROJECT_ROOT/webapp/persistence</filename> directory. This can be either one file or multiple files.
            </para>
        </sect2>
        <sect2>
            <title>Usage</title>
            <para>
                In the case that a portlet requires more sophisticated storage, the best approach is to create a separate
                portlet service for this management. See
                <link linkend='portlet-service-example' endterm="portlet-service-example-title"/>
                The following listing illustrates the storage/retrieval/update of an object to the database using the persitence manager.
            </para>
            <informalexample>
                <programlisting linenumbering="numbered">

                    PersistenceManagerRdbms pm =
                    PersistenceManagerFactory.createPersistenceManagerRdbms(<emphasis>"webappname"</emphasis>);

                    data.setName("test");

                    // store persistent data
                    pm.store(data);

                    // now retrieve it
                    PMData testdata = (PMData)pm.restore("from PMData where name='test'");

                    // modify it
                    testdata.setName("test2");

                    // update
                    pm.update(testdata);

                </programlisting>
            </informalexample>
            <para>
                This example persists the 'data' object. The <methodname>restore</methodname> method will restore the first object from
                the storage matching the given criteria. If you do want to restore a list of object you need
                to use <methodname>restorelist</methodname> instead.
            </para>
        </sect2>
        <sect2>
            <title>Storing data on a user behalf</title>
            If you do want to store data on behalf of the user (such like a history of commands) you
            have to modify your objects you want to store. In pure Hibernate you would simply just stick
            the <classname>user</classname>object in there. Since the <classname>user</classname>object is
            immutable for third party webapps and the way &Hibernate; works you have to use another method
            to store data.
            Every <classname>user</classname>object has a unique ID attached to it. The recommned way is that
            you creating a variable along with getter/setter methods in your class which you want to make
            persistent. The class would have information like this:
            <informalexample>
                <programlisting linenumbering="numbered">
                    ...
                    private String useroid = null;

                    public String getUseroid() {
                        return useroid;
                    }

                    public void setUseroid(String useroid) {
                        this.useroid = useroid;
                    }
                    ...
                </programlisting>
            </informalexample>
            The referring mappingfile would need one more line to save this information.
            <informalexample>
                <programlisting linenumbering="numbered">
                    property name="Useroid" type="string" column="userid"/
                </programlisting>
            </informalexample>
            Now you can store and update your data. To restore it you owuld have to use something like:
            <informalexample>
                <programlisting linenumbering="yes">
                    User user = request.getUser();
                    result = (MyClass)pm.restore("from "+MyClass.class.getName()+" as sub where sub.Useroid='"+user.getID()+"'");

                </programlisting>
            </informalexample>
        </sect2>

    </sect1>

</chapter>