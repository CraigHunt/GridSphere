<!-- $Id$ -->
<!--

This XML snippet is included into an ant build file.

It includes a rule, docbook-setup, that ensures that the necessary
DocBook distributions are unpacked and ready to process the XML.

This script was initially provided by the Tapestry project
http://jakarta.apache.org/proposals/tapestry
-->

<property file="../../../build.properties"/>


<property name="docs.dir" value="${gridsphere.build}/docs"/>
<property name="html.install.dir" value="${docs.dir}/${root.filename}"/>

<!-- The base name for the DTD distribution (the directory and tar file
     will match). -->

<property name="docbook.dtd.base" value="docbook-xml-4.3CR1"/>

<!-- Base name for the XSL distribution. -->

<property name="docbook.xsl.base" value="docbook-xsl-1.65.1"/>

<property name="docbook.dtd.dir" value="../common/${docbook.dtd.base}"/>
<property name="docbook.xsl.dir" value="../common/${docbook.xsl.base}"/>

<property name="docbook.chunked.xsl"
	value="../common/GridSphere-${docbook.xsl.base}-Chunked.xsl"/>

<property name="docbook.nonchunked.xsl"
	value="../common/GridSphere-${docbook.xsl.base}.xsl"/>

<property name="docbook.fop.xsl"
	value="../common/GridSphere-${docbook.xsl.base}-Fop.xsl"/>

<property environment="env"/>

<xmlcatalog id="docbook.catalog">
	<dtd publicId="-//OASIS//DTD DocBook XML V4.3CR1//EN" location="${docbook.dtd.dir}/docbookx.dtd"/>
</xmlcatalog>

<target name="docbook-setup"
	description="Make sure the latest distributions of DocBook DTDs and stylesheets are ready.">
	<available property="docbook.dtd.available" file="${docbook.dtd.dir}" type="dir"/>
	<available property="docbook.xsl.available" file="${docbook.xsl.dir}" type="dir"/>
	<antcall target="docbook-setup-inner"/>

	<copy file="../common/GridSphere.xsl.template"
		  tofile="${docbook.chunked.xsl}">
		<filterset>
			<filter token="docbook.xsl.base" value="${docbook.xsl.base}"/>
			<filter token="format" value="chunk"/>
		</filterset>
	</copy>

    <copy file="../common/GridSphere.xsl.template"
		  tofile="${docbook.nonchunked.xsl}">
		<filterset>
			<filter token="docbook.xsl.base" value="${docbook.xsl.base}"/>
			<filter token="format" value="docbook"/>
		</filterset>
	</copy>

	<copy file="../common/GridSphere.fop-xsl.template"
		  tofile="${docbook.fop.xsl}">
        <filterset>
			<filter token="docbook.xsl.base" value="${docbook.xsl.base}"/>
		</filterset>
	</copy>

</target>

<target name="docbook-setup-inner" depends="docbook-unpack-dtd,docbook-unpack-xsl">
</target>

<target name="docbook-unpack-dtd" unless="docbook.dtd.available">
	<echo>Unpacking DocBook DTD distribution ...</echo>
	<mkdir dir="../common/${docbook.dtd.base}"/>
	<unzip src="../common/dist/${docbook.dtd.base}.zip" dest="../common/${docbook.dtd.base}"/>
</target>

<target name="docbook-unpack-xsl" unless="docbook.xsl.available">
	<echo>Unpacking DocBook XSL distribution ...</echo>
	<unzip src="../common/dist/${docbook.xsl.base}.zip" dest="../common"/>

</target>

<property name="html.output.dir" value="html"/>
<property name="images.src.dir" value="${docbook.xsl.base}/images"/>
<property name="images.dest.dir" value="${html.output.dir}/images"/>
<property name="common-images.dest.dir" value="${html.output.dir}/common-images"/>

<target name="setup">
 <mkdir dir="${html.output.dir}"/>

 <mkdir dir="${common-images.dest.dir}"/>

 <echo message="FOP_HOME is set to = ${env.FOP_HOME}"/>
 <property name="fop.dir" value="${env.FOP_HOME}"/>
 <available property="fop.exists" file="${env.FOP_HOME}/build/fop.jar"/>
</target>

<target name="clean">
  <delete dir="${html.output.dir}"/>
</target>

<target name="copy-images" depends="setup">
    <copy todir="${html.output.dir}/standard-images">
      <fileset dir="${docbook.xsl.dir}/images">
        <include name="callouts/*.png"/>
      </fileset>
    </copy>
    <copy todir="${common-images.dest.dir}">
    	<fileset dir="${docbook.xsl.dir}/images">
    		<include name="*.png"/>
    	</fileset>
    </copy>
    <copy todir="${html.output.dir}">
    	<fileset dir=".">
    		<exclude name="*.xml"/>
    	</fileset>
    </copy>
</target>


<!-- Only attempt to generate PDF if the developer has set fop.dir
     in their build.properties. -->

<target name="pdf" depends="docbook-setup,copy-images" if="fop.exists">

   <uptodate property="uptodate.fop"
     targetfile="${html.output.dir}/${root.filename}.fop">
     <srcfiles dir=".">
       <include name="*.xml"/>
     </srcfiles>
    </uptodate>

    <antcall target="generate-fo-from-xml"/>

    <uptodate property="pdf.uptodate"
    	srcfile="${html.output.dir}/${root.filename}.fop"
    	targetfile="${html.output.dir}/${root.filename}.pdf"/>

    <antcall target="convert-fo-to-pdf"/>

</target>

<target name="generate-fo-from-xml" unless="uptodate.fop">
	<echo>

Generating Flow Objects from ${root.filename}.xml ...

</echo>

    <xslt destdir="${html.output.dir}"
    	style="${docbook.fop.xsl}"
    	processor="trax"
    	force="true"
    	in="${root.filename}.xml"
    	out="${html.output.dir}/${root.filename}.fop">
    	<xmlcatalog refid="docbook.catalog"/>
    </xslt>
</target>


<target name="convert-fo-to-pdf" unless="pdf.uptodate">
<echo>

Converting Flow Objects to PDF ...

</echo>

	<java classname="org.apache.fop.apps.Fop" fork="true" maxmemory="256m" dir="${html.output.dir}">
		<classpath>
			<fileset dir="${fop.dir}">
				<include name="build/fop.jar"/>
				<include name="lib/*.jar"/>
				<include name="lib/*.zip"/>
			</fileset>
		</classpath>
		<arg line="-d -fo ${root.filename}.fop"/>
		<arg line="-pdf ${root.filename}.pdf"/>
	</java>

</target>

<!-- Invoked using antcall, setting the property root.filename -->

<target name="html" depends="docbook-setup,copy-images">
    <copy todir="${html.output.dir}" file="../common/GridSphere.css"/>

   <uptodate property="uptodate.html"
     targetfile="${html.output.dir}/${root.filename}.html">
     <srcfiles dir=".">
       <include name="*.xml"/>
     </srcfiles>
    </uptodate>

</target>

<target name="html-chunked" depends="html">
    <antcall target="generate-html-chunked"/>
</target>

<target name="html-nonchunked" depends="html">
    <antcall target="generate-html-nonchunked"/>
</target>

<target name="generate-html-chunked" unless="uptodate.html">
    <echo>

Generating HTML from ${root.filename}.xml ...

</echo>

    <style destdir="${html.output.dir}"
    	style="${docbook.chunked.xsl}"
    	processor="trax"
    	force="true"
    	includes="${root.filename}.xml">
    	<param name="base.dir" expression="${basedir}/${html.output.dir}/"/>
    	<param name="root.filename" expression="${root.filename}"/>
		<param name="use.id.as.filename" expression="1"/>
    	<xmlcatalog refid="docbook.catalog"/>
    </style>

</target>

<target name="generate-html-nonchunked" unless="uptodate.html">
    <echo>

Generating HTML from ${root.filename}.xml ...

</echo>

    <style destdir="${html.output.dir}"
    	style="${docbook.nonchunked.xsl}"
    	processor="trax"
    	force="true"
    	includes="${root.filename}.xml">
    	<param name="base.dir" expression="${basedir}/${html.output.dir}/"/>
    	<param name="root.filename" expression="${root.filename}"/>
		<param name="use.id.as.filename" expression="1"/>
    	<xmlcatalog refid="docbook.catalog"/>
    </style>

</target>


<target name="install" depends="html-chunked,pdf"
	description="Build and install documentation.">
	<mkdir dir="${html.install.dir}"/>
  	<copy todir="${html.install.dir}">
  	    <fileset dir="${html.output.dir}">
  	        <exclude name="*.fop"/>
  	    </fileset>
  	</copy>
        <delete dir="${html.output.dir}"/>
</target>


<target name="install-index" depends="html-nonchunked"
	description="Build and install documentation.">
  	<copy todir="${docs.dir}">
  	    <fileset dir="${html.output.dir}">
            <exclude name="*.fop"/>
            <exclude name="images/**"/>
            <exclude name="standard-images/**"/>
            <exclude name="common-images/**"/>
        </fileset>
  	</copy>
    <delete dir="${html.output.dir}"/>
</target>
