<!-- =======================================================================

   Build file for @PROJECT_TITLE@

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org

Build Instructions:
   To build, invoke "ant"

Copyright:
  2002,2003

- $Id$

============================================================================ -->

<project name="@PROJECT_TITLE@" default="help" basedir=".">

    <property file="build.properties"/>

    <property name="project.name" value="@PROJECT_NAME@"/>
    <property name="project.title" value="@PROJECT_TITLE@"/>

    <property name="gridsphere.home" value="../.."/>

    <property name="optimize"    value="false"/>
    <property name="debug"       value="on"/>
    <property name="deprecation" value="true"/>

    <!-- Version properties -->
    <property name="version"         value="1.0" />
    <property name="release"         value="rc1" />
    <property name="version.release" value="${version} ${release}"/>

    <property name="project"         value="${project.title} ${version.release}"/>
    <property name="project.api" value="${project.title} API ${version.release}" />

    <!-- GridSphere build and dist directories -->

    <!--- Type of SQL Database to use -->
    <property name="DATABASE_TYPE" value="${gridsphere.database.type}"/>

    <!-- GridSphere build targets -->
    <property name="build.home"    value="${project.build}/home"/>
    <property name="build.classes" value="${project.build}/classes"/>
    <property name="build.webapp" value="${project.build}/webapp"/>
    <property name="build.docs"    value="${project.build}/docs"/>
    <property name="build.javadoc" value="${build.docs}/javadocs"/>
    <property name="build.tests"   value="${project.build}/tests"/>

    <property environment="env"/>

    <!-- Check for catalina.sh in CATALINA_HOME/bin -->
    <target name="check-catalina">
        <condition property="catalina.exists">
            <available file="${env.CATALINA_HOME}/bin/bootstrap.jar"/>
        </condition>
        <fail message="Unable to find Tomcat 4.1.+. Make sure you have set $CATALINA_HOME set" unless="catalina.exists"/>
    </target>

    <!-- =================================================================== -->
    <!-- Sets the CLASSPATH                                                  -->
    <!-- =================================================================== -->
    <path id="classpath">

        <pathelement location="${build.classes}"/>

        <fileset dir="${env.CATALINA_HOME}/common/lib">
            <include name="*.jar"/>
        </fileset>

        <!-- this is for the XML JARs in Tomcat 4.1.x -->
        <fileset dir="${env.CATALINA_HOME}/common/endorsed">
            <include name="*.jar"/>
        </fileset>

        <fileset dir="${gridsphere.home}/lib">
            <include name="*.jar"/>
            <include name="ext/*.jar"/>
        </fileset>

        <pathelement path="${java.class.path}"/>
    </path>

    <!-- =================================================================== -->
    <!-- Functions                                                           -->
    <!-- =================================================================== -->
    <target name="setenv" depends="check-catalina" description="Check for libraries and print out config information">

        <!-- Make build directories -->
        <mkdir dir="src"/>
        <mkdir dir="lib"/>
        <mkdir dir="${project.build}"/>
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.webapp}"/>
        <mkdir dir="${build.docs}"/>

        <property name="GRIDSPHERE_HOME" value="${env.CATALINA_HOME}/gridsphere"/>
        <property name="TEST_HOME" value="${env.CATALINA_HOME}/webapps/${project.name}/WEB-INF/test"/>

        <echo message="--- Build environment for ${project} ---" />
        <echo message="--- Flags (Note: If the {property name} is displayed,"/>
        <echo message="           then the component is not present)" />
        <echo message=""/>

        <echo message="ANT_HOME is set to = ${env.ANT_HOME}"/>
        <echo message="JAVA_HOME is set to = ${env.JAVA_HOME}"/>
        <echo message="CATALINA_HOME is set to = ${env.CATALINA_HOME}"/>
        <echo message="TEST_HOME is set to = ${TEST_HOME}"/>
        <echo message="GRIDSPHERE_HOME is set to = ${GRIDSPHERE_HOME}"/>

        <echo message="--- Property values ---" />
        <echo message="debug=${debug}" />
        <echo message="deprecation=${deprecation}" />
        <echo message="optimize=${optimize}" />
    </target>

    <!-- =================================================================== -->
    <!-- Print usage information                                             -->
    <!-- =================================================================== -->
    <target name="help" description="shows help about useful target">
        <echo message="target                 description"/>
        <echo message="-----------------------------------------------------------------"/>
        <echo message="clean                  Cleans up the build dir                       "/>
        <echo message="compile                Compiles all the code                         "/>
        <echo message="jar                    Create a ${project.name} JAR                  "/>
        <echo message="war                    Create a ${project.name} WAR                  "/>
        <echo message="docs                   Creates ${project.title} Javadoc API          "/>
        <echo message="deploy                 Deploys ${project.title} to tomcat            "/>
        <echo message="dist                   Builds a binary ${project.title} distribution "/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles all source code in distribution                            -->
    <!-- =================================================================== -->
    <target name="compile-all" depends="compile, compile-tests" description="Compiles all source code in distribution"/>

    <!-- =================================================================== -->
    <!-- Compiles @PROJECT_TITLE@ source code                                -->
    <!-- =================================================================== -->
    <target name="compile" depends="setenv" description="Compile @PROJECT_TITLE@ source code">
        <echo>Compiling @PROJECT_TITLE@ source code</echo>
        <javac  srcdir="src"
            destdir="${build.classes}"
            classpathref="classpath"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="false"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles JUnit tests                                                -->
    <!-- =================================================================== -->
    <target name="compile-tests" depends="compile" description="Compiles all JUnit tests">
        <echo>Compiling JUnit Tests</echo>
        <javac srcdir="tests"
            destdir="${build.classes}"
            classpathref="classpath"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">
        </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Creates castor definitions                                          -->
    <!-- =================================================================== -->
    <target name="configure-database" depends="setenv, doclet-mapping" if="use.persistence">
        <property name="DATABASE_FILE"
                  value="${GRIDSPHERE_HOME}/${project.name}/database/database.xml"/>
        <echo message="Preprocessing Database file: ${DATABASE_FILE}"/>
        <replace file="${DATABASE_FILE}"
                 token="@GRIDSPHERE_HOME@"
                 value="${GRIDSPHERE_HOME}"/>
        <replace file="${DATABASE_FILE}"
                 token="@DATABASE_NAME@"
                 value="${DATABASE_NAME}"/>
    </target>

    <target name="configure-test-database" depends="setenv, doclet-mapping" if="use.persistence">
        <property name="DATABASE_FILE"
            value="${GRIDSPHERE_HOME}/database/database-test.xml"/>
        <echo message="Preprocessing Database file: ${DATABASE_FILE}"/>
        <replace file="${DATABASE_FILE}"
            token="@GRIDSPHERE_HOME@"
            value="${GRIDSPHERE_HOME}"/>
       <replace file="${DATABASE_FILE}"
            token="@TEST_HOME@"
            value="${TEST_HOME}"/>
        <replace file="${DATABASE_FILE}"
            token="@DATABASE_NAME@"
            value="${DATABASE_NAME}"/>
    </target>

    <target name="check-mapping">
        <echo message="force mapping: ${var_force_mapping}"/>
        <condition property="var_force_mapping">
            <not>
                <available file="${GRIDSPHERE_HOME}/${project.name}/database/docletmapping.xml"/>
            </not>
        </condition>
    </target>

    <target name="doclet-mapping" depends="check-mapping" if="var_force_mapping, use.persistence">
        <mkdir dir="${GRIDSPHERE_HOME}/${project.name}/database"/>
        <javadoc packagenames="*"
            sourcepath="src"
            private="true"
            doclet="org.castor.doclet.ddl.DDL"
            docletpath="${gridsphere.home}/lib/ext/jdom.jar;${gridsphere.home}/lib/ext/castor-doclet.jar"
            additionalparam=" -J-DFILE=${GRIDSPHERE_HOME}/${project.name}/database/create.sql -J-DDB_TYPE=db2 -J-DLOG=1">
            <classpath refid="classpath"/>
        </javadoc>
        <javadoc
            sourcepath="src"
            private="true"
            doclet="org.castor.doclet.jdo.JDO"
            docletpath="${gridsphere.home}/lib/ext/jdom.jar;${gridsphere.home}/lib/ext/castor-doclet.jar"
            additionalparam="-J-DFILE=${GRIDSPHERE_HOME}/${project.name}/database/docletmapping.xml -J-DLOG=1">
            <classpath refid="classpath"/>
        </javadoc>
    </target>

    <target name="check-real-database-exists">
        <echo message="force database: ${var_force_database}"/>
        <condition property="var_force_database">
            <not>
                <available file="${GRIDSPHERE_HOME}/${project.name}/database/${project.name}.script"/>
            </not>
        </condition>
    </target>

    <target name="check-test-database-exists" if="use.persistence">
        <echo message="force database: ${var_force_database}"/>
        <condition property="var_force_database">
            <not>
                <available file="${TEST_HOME}/database/${project.name}-test.script"/>
            </not>
        </condition>
    </target>

    <target name="create-real-database" depends="setenv, configure-database, check-real-database-exists" if="use.persistence, var_force_database">
        <echo message="Creating Database at: ${GRIDSPHERE_HOME}/database/${project.name}"/>
        <echo message="Using script: ${GRIDSPHERE_HOME}/${project.name}/database/create.sql"/>
        <sql driver="org.hsqldb.jdbcDriver"
           url="jdbc:hsqldb:${GRIDSPHERE_HOME}/${project.name}/database/${project.name}"
           userid="sa"
           password=""
           onerror="continue"
           src="${GRIDSPHERE_HOME}/${project.name}/database/create.sql">
           <classpath refid="classpath"/>
        </sql>
    </target>

    <target name="create-test-database" depends="configure-test-database, check-test-database-exists" if="use.persistence, var_force_database">
        <echo message="Creating Database at: ${TEST_HOME}/database/${project.name}-test"/>
        <echo message="Using script: ${GRIDSPHERE_HOME}/${project.name}/database/create.sql"/>
        <sql driver="org.hsqldb.jdbcDriver"
           url="jdbc:hsqldb:${TEST_HOME}/database/${project.name}-test"
           userid="sa"
           password=""
           onerror="continue"
           src="${GRIDSPHERE_HOME}/${project.name}/database/create.sql">
           <classpath refid="classpath"/>
        </sql>
    </target>
    <!-- =================================================================== -->
    <!-- Creates a @PROJECT_TITLE@ JAR library archive configured for Tomcat -->
    <!-- =================================================================== -->
    <target name="jar" depends="portlets-jar, services-jar" description="Creates @PROJECT_NAME@ JAR"/>

    <!-- =================================================================== -->
    <!-- Creates a @PROJECT_TITLE@ JAR library archive configured for Tomcat -->
    <!-- =================================================================== -->
    <target name="portlets-jar" depends="compile" description="Creates @PROJECT_NAME@ portlets JAR">
        <echo>Creating @PROJECT_NAME@ JAR for Tomcat</echo>

        <mkdir dir="${build.classes}/${project.name}"/>

        <copy file="config/log4j.properties"
                  tofile="${build.classes}/${project.name}/log4j.properties"/>

        <jar jarfile="lib/${project.name}.jar" basedir="${build.classes}" >
            <include name="org/**" />
            <exclude name="**/services/**"/>
            <include name="${project.name}/**" />
        </jar>
     </target>

    <!-- =================================================================== -->
    <!-- Creates a @PROJECT_TITLE@ JAR library archive configured for Tomcat -->
    <!-- =================================================================== -->
    <target name="services-jar" depends="compile" description="Creates @PROJECT_NAME@ services JAR">
        <echo>Creating  @PROJECT_NAME@ services JAR for Tomcat</echo>

        <mkdir dir="${build.classes}/${project.name}"/>

        <copy file="config/log4j.properties"
                  tofile="${build.classes}/${project.name}/log4j.properties"/>

        <jar jarfile="lib/${project.name}-services.jar" basedir="${build.classes}" >
            <include name="**/services/**"/>
        </jar>
     </target>

    <!-- =================================================================== -->
    <!-- Cleans everything                                                   -->
    <!-- =================================================================== -->
    <target name="clean" description="Delete classes and existing library">
        <delete quiet="true" dir="${project.build}"/>
        <delete quiet="true" dir="${project.dist}"/>
    </target>

    <target name="docs" depends="javadocs" description="Create @PROJECT_TITLE@ Documentation"/>

    <!-- =================================================================== -->
    <!-- Creates all the @PROJECT_TITLE@ API documentation                   -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="setenv" description="Create @PROJECT_TITLE@ Javadocs">
        <echo>Creating @PROJECT_NAME@ Javadocs</echo>
        <delete quiet="true" dir="${build.javadoc}"/>
        <mkdir dir="${build.javadoc}"/>
        <javadoc sourcepath="src"
                 classpathref="classpath"
                 destdir="${build.javadoc}"
                 author="true"
                 version="true"
                 splitindex="true"
                 use="true"
                 maxmemory="180m"
                 windowtitle="${project.title}"
                 doctitle="${project.api}">
        <!-- bottom="Copyright &#169; 2002,2003 GridLab Project. All Rights Reserved."> -->
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the @PROJECT_TITLE@  WAR file                               -->
    <!-- =================================================================== -->
    <target name="war" depends="jar" description="Create @PROJECT_TITLE@ WAR">
        <echo>Creating @PROJECT_NAME@ web application WAR</echo>
        <war warfile="${project.build}/${project.name}.war" update="true"
            webxml="${webapp.dir}/WEB-INF/web.xml">
            <fileset dir="${gswebapp.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Deploys @PROJECT_TITLE@ portlets to a local server                   -->
    <!-- =================================================================== -->
    <target name="deploy" depends="jar, create-real-database" if="catalina.exists" description="Deploys @PROJECT_TITLE@ portlet to a local server">
        <echo>Deploying @PROJECT_NAME@ to Tomcat</echo>
        <!-- Copy the gridsphere web app to build directory -->
        <property name="project.webapp" value="${env.CATALINA_HOME}/webapps/${project.name}"/>
        <copy todir="${project.webapp}">
            <fileset dir="webapp"/>
        </copy>

        <copy file="${gridsphere.home}/lib/portlet-widget-tags.jar" todir="${project.webapp}/WEB-INF/lib"/>
        <copy file="lib/${project.name}.jar" todir="${project.webapp}/WEB-INF/lib"/>

    </target>

</project>
